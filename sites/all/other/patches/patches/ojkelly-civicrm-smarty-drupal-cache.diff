--- a/Smarty/Smarty.class.php
+++ b/Smarty/Smarty.class.php
@@ -35,7 +35,7 @@
 /**
  * DIR_SEP isn't used anymore, but third party apps might
  */
-if(!defined('DIR_SEP')) {
+if (!defined('DIR_SEP')) {
     define('DIR_SEP', DIRECTORY_SEPARATOR);
 }
 
@@ -53,16 +53,15 @@
     define('SMARTY_CORE_DIR', SMARTY_DIR . 'internals' . DIRECTORY_SEPARATOR);
 }
 
-define('SMARTY_PHP_PASSTHRU',   0);
-define('SMARTY_PHP_QUOTE',      1);
-define('SMARTY_PHP_REMOVE',     2);
-define('SMARTY_PHP_ALLOW',      3);
+define('SMARTY_PHP_PASSTHRU', 0);
+define('SMARTY_PHP_QUOTE', 1);
+define('SMARTY_PHP_REMOVE', 2);
+define('SMARTY_PHP_ALLOW', 3);
 
 /**
  * @package Smarty
  */
-class Smarty
-{
+class Smarty {
     /**#@+
      * Smarty Configuration Section
      */
@@ -72,28 +71,28 @@ class Smarty
      *
      * @var string
      */
-    var $template_dir    =  'templates';
+    var $template_dir = 'templates';
 
     /**
      * The directory where compiled templates are located.
      *
      * @var string
      */
-    var $compile_dir     =  'templates_c';
+    var $compile_dir = 'templates_c';
 
     /**
      * The directory where config files are located.
      *
      * @var string
      */
-    var $config_dir      =  'configs';
+    var $config_dir = 'configs';
 
     /**
      * An array of directories searched for plugins.
      *
      * @var array
      */
-    var $plugins_dir     =  array('plugins');
+    var $plugins_dir = array('plugins');
 
     /**
      * If debugging is enabled, a debug console window will display
@@ -102,14 +101,14 @@ class Smarty
      *
      * @var boolean
      */
-    var $debugging       =  false;
+    var $debugging = false;
 
     /**
      * When set, smarty does uses this value as error_reporting-level.
      *
      * @var integer
      */
-    var $error_reporting  =  null;
+    var $error_reporting = null;
 
     /**
      * This is the path to the debug console template. If not set,
@@ -117,7 +116,7 @@ class Smarty
      *
      * @var string
      */
-    var $debug_tpl       =  '';
+    var $debug_tpl = '';
 
     /**
      * This determines if debugging is enable-able from the browser.
@@ -128,7 +127,7 @@ class Smarty
      * @link http://www.foo.dom/index.php?SMARTY_DEBUG
      * @var string
      */
-    var $debugging_ctrl  =  'NONE';
+    var $debugging_ctrl = 'NONE';
 
     /**
      * This tells Smarty whether to check for recompiling or not. Recompiling
@@ -138,7 +137,7 @@ class Smarty
      *
      * @var boolean
      */
-    var $compile_check   =  true;
+    var $compile_check = false;
 
     /**
      * This forces templates to compile every time. Useful for development
@@ -146,7 +145,7 @@ class Smarty
      *
      * @var boolean
      */
-    var $force_compile   =  false;
+    var $force_compile = false;
 
     /**
      * This enables template caching.
@@ -157,15 +156,15 @@ class Smarty
      * </ul>
      * @var integer
      */
-    var $caching         =  0;
+    var $caching = 0;
 
     /**
      * The name of the directory for cache files.
      *
      * @var string
      */
-    var $cache_dir       =  'cache';
-
+    //var  $cwd = getcwd() ;
+    var $cache_dir = 'cache'; // Figure out how to locate this
     /**
      * This is the number of seconds cached content will persist.
      * <ul>
@@ -175,7 +174,7 @@ class Smarty
      *
      * @var integer
      */
-    var $cache_lifetime  =  3600;
+    var $cache_lifetime = 14400; // One Day
 
     /**
      * Only used when $caching is enabled. If true, then If-Modified-Since headers
@@ -199,7 +198,7 @@ class Smarty
      *
      * @var integer
      */
-    var $php_handling    =  SMARTY_PHP_PASSTHRU;
+    var $php_handling = SMARTY_PHP_PASSTHRU;
 
     /**
      * This enables template security. When enabled, many things are restricted
@@ -209,7 +208,7 @@ class Smarty
      *
      * @var boolean
      */
-    var $security       =   false;
+    var $security = false;
 
     /**
      * This is the list of template directories that are considered secure. This
@@ -218,7 +217,7 @@ class Smarty
      *
      * @var array
      */
-    var $secure_dir     =   array();
+    var $secure_dir = array();
 
     /**
      * These are the security settings for Smarty. They are used only when
@@ -226,19 +225,21 @@ class Smarty
      *
      * @var array
      */
-    var $security_settings  = array(
-                                    'PHP_HANDLING'    => false,
-                                    'IF_FUNCS'        => array('array', 'list',
-                                                               'isset', 'empty',
-                                                               'count', 'sizeof',
-                                                               'in_array', 'is_array',
-                                                               'true', 'false', 'null'),
-                                    'INCLUDE_ANY'     => false,
-                                    'PHP_TAGS'        => false,
-                                    'MODIFIER_FUNCS'  => array('count'),
-                                    'ALLOW_CONSTANTS'  => false,
-                                    'ALLOW_SUPER_GLOBALS' => true
-                                   );
+    var $security_settings = array(
+        'PHP_HANDLING' => false,
+        'IF_FUNCS' => array(
+            'array', 'list',
+            'isset', 'empty',
+            'count', 'sizeof',
+            'in_array', 'is_array',
+            'true', 'false', 'null'
+        ),
+        'INCLUDE_ANY' => false,
+        'PHP_TAGS' => false,
+        'MODIFIER_FUNCS' => array('count'),
+        'ALLOW_CONSTANTS' => false,
+        'ALLOW_SUPER_GLOBALS' => true
+    );
 
     /**
      * This is an array of directories where trusted php scripts reside.
@@ -246,21 +247,21 @@ class Smarty
      *
      * @var array
      */
-    var $trusted_dir        = array();
+    var $trusted_dir = array();
 
     /**
      * The left delimiter used for the template tags.
      *
      * @var string
      */
-    var $left_delimiter  =  '{';
+    var $left_delimiter = '{';
 
     /**
      * The right delimiter used for the template tags.
      *
      * @var string
      */
-    var $right_delimiter =  '}';
+    var $right_delimiter = '}';
 
     /**
      * The order in which request variables are registered, similar to
@@ -269,7 +270,7 @@ class Smarty
      *
      * @var string
      */
-    var $request_vars_order    = 'EGPCS';
+    var $request_vars_order = 'EGPCS';
 
     /**
      * Indicates wether $HTTP_*_VARS[] (request_use_auto_globals=false)
@@ -279,7 +280,7 @@ class Smarty
      *
      * @var boolean
      */
-    var $request_use_auto_globals      = true;
+    var $request_use_auto_globals = true;
 
     /**
      * Set this if you want different sets of compiled files for the same
@@ -289,7 +290,7 @@ class Smarty
      *
      * @var string
      */
-    var $compile_id            = null;
+    var $compile_id = null;
 
     /**
      * This tells Smarty whether or not to use sub dirs in the cache/ and
@@ -299,7 +300,7 @@ class Smarty
      * @var boolean
      *
      */
-    var $use_sub_dirs          = false;
+    var $use_sub_dirs = false;
 
     /**
      * This is a list of the modifiers to apply to all template variables.
@@ -308,7 +309,7 @@ class Smarty
      *
      * @var array
      */
-    var $default_modifiers        = array();
+    var $default_modifiers = array();
 
     /**
      * This is the resource type to be used when not specified
@@ -322,14 +323,14 @@ class Smarty
      *
      * @var array
      */
-    var $default_resource_type    = 'file';
+    var $default_resource_type = 'file';
 
     /**
      * The function used for cache file handling. If not set, built-in caching is used.
      *
      * @var null|string function name
      */
-    var $cache_handler_func   = null;
+    var $cache_handler_func = null;
 
     /**
      * This indicates which filters are automatically loaded into Smarty.
@@ -383,161 +384,162 @@ class Smarty
      *
      * @var string
      */
-    var $compiler_file        =    'Smarty_Compiler.class.php';
+    var $compiler_file = 'Smarty_Compiler.class.php';
 
     /**
      * The class used for compiling templates.
      *
      * @var string
      */
-    var $compiler_class        =   'Smarty_Compiler';
+    var $compiler_class = 'Smarty_Compiler';
 
     /**
      * The class used to load config vars.
      *
      * @var string
      */
-    var $config_class          =   'Config_File';
+    var $config_class = 'Config_File';
 
-/**#@+
- * END Smarty Configuration Section
- * There should be no need to touch anything below this line.
- * @access private
- */
+    /**#@+
+     * END Smarty Configuration Section
+     * There should be no need to touch anything below this line.
+     * @access private
+     */
     /**
      * where assigned template vars are kept
      *
      * @var array
      */
-    var $_tpl_vars             = array();
+    var $_tpl_vars = array();
 
     /**
      * stores run-time $smarty.* vars
      *
      * @var null|array
      */
-    var $_smarty_vars          = null;
+    var $_smarty_vars = null;
 
     /**
      * keeps track of sections
      *
      * @var array
      */
-    var $_sections             = array();
+    var $_sections = array();
 
     /**
      * keeps track of foreach blocks
      *
      * @var array
      */
-    var $_foreach              = array();
+    var $_foreach = array();
 
     /**
      * keeps track of tag hierarchy
      *
      * @var array
      */
-    var $_tag_stack            = array();
+    var $_tag_stack = array();
 
     /**
      * configuration object
      *
      * @var Config_file
      */
-    var $_conf_obj             = null;
+    var $_conf_obj = null;
 
     /**
      * loaded configuration settings
      *
      * @var array
      */
-    var $_config               = array(array('vars'  => array(), 'files' => array()));
+    var $_config = array(array('vars' => array(), 'files' => array()));
 
     /**
      * md5 checksum of the string 'Smarty'
      *
      * @var string
      */
-    var $_smarty_md5           = 'f8d698aea36fcbead2b9d5359ffca76f';
+    var $_smarty_md5 = 'f8d698aea36fcbead2b9d5359ffca76f';
 
     /**
      * Smarty version number
      *
      * @var string
      */
-    var $_version              = '2.6.27';
+    var $_version = '2.6.27';
 
     /**
      * current template inclusion depth
      *
      * @var integer
      */
-    var $_inclusion_depth      = 0;
+    var $_inclusion_depth = 0;
 
     /**
      * for different compiled templates
      *
      * @var string
      */
-    var $_compile_id           = null;
+    var $_compile_id = null;
 
     /**
      * text in URL to enable debug mode
      *
      * @var string
      */
-    var $_smarty_debug_id      = 'SMARTY_DEBUG';
+    var $_smarty_debug_id = 'SMARTY_DEBUG';
 
     /**
      * debugging information for debug console
      *
      * @var array
      */
-    var $_smarty_debug_info    = array();
+    var $_smarty_debug_info = array();
 
     /**
      * info that makes up a cache file
      *
      * @var array
      */
-    var $_cache_info           = array();
+    var $_cache_info = array();
 
     /**
      * default file permissions
      *
      * @var integer
      */
-    var $_file_perms           = 0644;
+    var $_file_perms = 0644;
 
     /**
      * default dir permissions
      *
      * @var integer
      */
-    var $_dir_perms               = 0771;
+    var $_dir_perms = 0771;
 
     /**
      * registered objects
      *
      * @var array
      */
-    var $_reg_objects           = array();
+    var $_reg_objects = array();
 
     /**
      * table keeping track of plugins
      *
      * @var array
      */
-    var $_plugins              = array(
-                                       'modifier'      => array(),
-                                       'function'      => array(),
-                                       'block'         => array(),
-                                       'compiler'      => array(),
-                                       'prefilter'     => array(),
-                                       'postfilter'    => array(),
-                                       'outputfilter'  => array(),
-                                       'resource'      => array(),
-                                       'insert'        => array());
+    var $_plugins = array(
+        'modifier' => array(),
+        'function' => array(),
+        'block' => array(),
+        'compiler' => array(),
+        'prefilter' => array(),
+        'postfilter' => array(),
+        'outputfilter' => array(),
+        'resource' => array(),
+        'insert' => array()
+    );
 
 
     /**
@@ -566,10 +568,9 @@ class Smarty
     /**
      * The class constructor.
      */
-    function Smarty()
-    {
-      $this->assign('SCRIPT_NAME', isset($_SERVER['SCRIPT_NAME']) ? $_SERVER['SCRIPT_NAME']
-                    : @$GLOBALS['HTTP_SERVER_VARS']['SCRIPT_NAME']);
+    function Smarty() {
+        $this->assign('SCRIPT_NAME', isset($_SERVER['SCRIPT_NAME']) ? $_SERVER['SCRIPT_NAME']
+            : @$GLOBALS['HTTP_SERVER_VARS']['SCRIPT_NAME']);
     }
 
     /**
@@ -578,17 +579,17 @@ function Smarty()
      * @param array|string $tpl_var the template variable name(s)
      * @param mixed $value the value to assign
      */
-    function assign($tpl_var, $value = null)
-    {
-        if (is_array($tpl_var)){
+    function assign($tpl_var, $value = null) {
+        if (is_array($tpl_var)) {
             foreach ($tpl_var as $key => $val) {
                 if ($key != '') {
                     $this->_tpl_vars[$key] = $val;
                 }
             }
         } else {
-            if ($tpl_var != '')
+            if ($tpl_var != '') {
                 $this->_tpl_vars[$tpl_var] = $value;
+            }
         }
     }
 
@@ -598,10 +599,10 @@ function assign($tpl_var, $value = null)
      * @param string $tpl_var the template variable name
      * @param mixed $value the referenced value to assign
      */
-    function assign_by_ref($tpl_var, &$value)
-    {
-        if ($tpl_var != '')
-            $this->_tpl_vars[$tpl_var] = &$value;
+    function assign_by_ref($tpl_var, &$value) {
+        if ($tpl_var != '') {
+            $this->_tpl_vars[$tpl_var] = & $value;
+        }
     }
 
     /**
@@ -610,17 +611,16 @@ function assign_by_ref($tpl_var, &$value)
      * @param array|string $tpl_var the template variable name(s)
      * @param mixed $value the value to append
      */
-    function append($tpl_var, $value=null, $merge=false)
-    {
+    function append($tpl_var, $value = null, $merge = false) {
         if (is_array($tpl_var)) {
             // $tpl_var is an array, ignore $value
             foreach ($tpl_var as $_key => $_val) {
                 if ($_key != '') {
-                    if(!@is_array($this->_tpl_vars[$_key])) {
-                        settype($this->_tpl_vars[$_key],'array');
+                    if (!@is_array($this->_tpl_vars[$_key])) {
+                        settype($this->_tpl_vars[$_key], 'array');
                     }
-                    if($merge && is_array($_val)) {
-                        foreach($_val as $_mkey => $_mval) {
+                    if ($merge && is_array($_val)) {
+                        foreach ($_val as $_mkey => $_mval) {
                             $this->_tpl_vars[$_key][$_mkey] = $_mval;
                         }
                     } else {
@@ -630,11 +630,11 @@ function append($tpl_var, $value=null, $merge=false)
             }
         } else {
             if ($tpl_var != '' && isset($value)) {
-                if(!@is_array($this->_tpl_vars[$tpl_var])) {
-                    settype($this->_tpl_vars[$tpl_var],'array');
+                if (!@is_array($this->_tpl_vars[$tpl_var])) {
+                    settype($this->_tpl_vars[$tpl_var], 'array');
                 }
-                if($merge && is_array($value)) {
-                    foreach($value as $_mkey => $_mval) {
+                if ($merge && is_array($value)) {
+                    foreach ($value as $_mkey => $_mval) {
                         $this->_tpl_vars[$tpl_var][$_mkey] = $_mval;
                     }
                 } else {
@@ -650,18 +650,17 @@ function append($tpl_var, $value=null, $merge=false)
      * @param string $tpl_var the template variable name
      * @param mixed $value the referenced value to append
      */
-    function append_by_ref($tpl_var, &$value, $merge=false)
-    {
+    function append_by_ref($tpl_var, &$value, $merge = false) {
         if ($tpl_var != '' && isset($value)) {
-            if(!@is_array($this->_tpl_vars[$tpl_var])) {
-             settype($this->_tpl_vars[$tpl_var],'array');
+            if (!@is_array($this->_tpl_vars[$tpl_var])) {
+                settype($this->_tpl_vars[$tpl_var], 'array');
             }
             if ($merge && is_array($value)) {
-                foreach($value as $_key => $_val) {
-                    $this->_tpl_vars[$tpl_var][$_key] = &$value[$_key];
+                foreach ($value as $_key => $_val) {
+                    $this->_tpl_vars[$tpl_var][$_key] = & $value[$_key];
                 }
             } else {
-                $this->_tpl_vars[$tpl_var][] = &$value;
+                $this->_tpl_vars[$tpl_var][] = & $value;
             }
         }
     }
@@ -672,13 +671,14 @@ function append_by_ref($tpl_var, &$value, $merge=false)
      *
      * @param string $tpl_var the template variable to clear
      */
-    function clear_assign($tpl_var)
-    {
-        if (is_array($tpl_var))
-            foreach ($tpl_var as $curr_var)
+    function clear_assign($tpl_var) {
+        if (is_array($tpl_var)) {
+            foreach ($tpl_var as $curr_var) {
                 unset($this->_tpl_vars[$curr_var]);
-        else
+            }
+        } else {
             unset($this->_tpl_vars[$tpl_var]);
+        }
     }
 
 
@@ -688,8 +688,7 @@ function clear_assign($tpl_var)
      * @param string $function the name of the template function
      * @param string $function_impl the name of the PHP function to register
      */
-    function register_function($function, $function_impl, $cacheable=true, $cache_attrs=null)
-    {
+    function register_function($function, $function_impl, $cacheable = true, $cache_attrs = null) {
         $this->_plugins['function'][$function] =
             array($function_impl, null, null, false, $cacheable, $cache_attrs);
 
@@ -700,8 +699,7 @@ function register_function($function, $function_impl, $cacheable=true, $cache_at
      *
      * @param string $function name of template function
      */
-    function unregister_function($function)
-    {
+    function unregister_function($function) {
         unset($this->_plugins['function'][$function]);
     }
 
@@ -714,8 +712,8 @@ function unregister_function($function)
      * @param boolean $smarty_args smarty argument format, else traditional
      * @param null|array $block_functs list of methods that are block format
      */
-    function register_object($object, &$object_impl, $allowed = array(), $smarty_args = true, $block_methods = array())
-    {
+    function register_object($object, &$object_impl, $allowed = array(), $smarty_args = true,
+                             $block_methods = array()) {
         settype($allowed, 'array');
         settype($smarty_args, 'boolean');
         $this->_reg_objects[$object] =
@@ -727,8 +725,7 @@ function register_object($object, &$object_impl, $allowed = array(), $smarty_arg
      *
      * @param string $object name of template object
      */
-    function unregister_object($object)
-    {
+    function unregister_object($object) {
         unset($this->_reg_objects[$object]);
     }
 
@@ -739,8 +736,7 @@ function unregister_object($object)
      * @param string $block name of template block
      * @param string $block_impl PHP function to register
      */
-    function register_block($block, $block_impl, $cacheable=true, $cache_attrs=null)
-    {
+    function register_block($block, $block_impl, $cacheable = true, $cache_attrs = null) {
         $this->_plugins['block'][$block] =
             array($block_impl, null, null, false, $cacheable, $cache_attrs);
     }
@@ -750,8 +746,7 @@ function register_block($block, $block_impl, $cacheable=true, $cache_attrs=null)
      *
      * @param string $block name of template function
      */
-    function unregister_block($block)
-    {
+    function unregister_block($block) {
         unset($this->_plugins['block'][$block]);
     }
 
@@ -761,8 +756,7 @@ function unregister_block($block)
      * @param string $function name of template function
      * @param string $function_impl name of PHP function to register
      */
-    function register_compiler_function($function, $function_impl, $cacheable=true)
-    {
+    function register_compiler_function($function, $function_impl, $cacheable = true) {
         $this->_plugins['compiler'][$function] =
             array($function_impl, null, null, false, $cacheable);
     }
@@ -772,8 +766,7 @@ function register_compiler_function($function, $function_impl, $cacheable=true)
      *
      * @param string $function name of template function
      */
-    function unregister_compiler_function($function)
-    {
+    function unregister_compiler_function($function) {
         unset($this->_plugins['compiler'][$function]);
     }
 
@@ -783,8 +776,7 @@ function unregister_compiler_function($function)
      * @param string $modifier name of template modifier
      * @param string $modifier_impl name of PHP function to register
      */
-    function register_modifier($modifier, $modifier_impl)
-    {
+    function register_modifier($modifier, $modifier_impl) {
         $this->_plugins['modifier'][$modifier] =
             array($modifier_impl, null, null, false);
     }
@@ -794,8 +786,7 @@ function register_modifier($modifier, $modifier_impl)
      *
      * @param string $modifier name of template modifier
      */
-    function unregister_modifier($modifier)
-    {
+    function unregister_modifier($modifier) {
         unset($this->_plugins['modifier'][$modifier]);
     }
 
@@ -805,19 +796,22 @@ function unregister_modifier($modifier)
      * @param string $type name of resource
      * @param array $functions array of functions to handle resource
      */
-    function register_resource($type, $functions)
-    {
-        if (count($functions)==4) {
+    function register_resource($type, $functions) {
+        if (count($functions) == 4) {
             $this->_plugins['resource'][$type] =
                 array($functions, false);
 
-        } elseif (count($functions)==5) {
+        } elseif (count($functions) == 5) {
             $this->_plugins['resource'][$type] =
-                array(array(array(&$functions[0], $functions[1])
-                            ,array(&$functions[0], $functions[2])
-                            ,array(&$functions[0], $functions[3])
-                            ,array(&$functions[0], $functions[4]))
-                      ,false);
+                array(
+                    array(
+                        array(&$functions[0], $functions[1])
+                        , array(&$functions[0], $functions[2])
+                        , array(&$functions[0], $functions[3])
+                        , array(&$functions[0], $functions[4])
+                    )
+                    , false
+                );
 
         } else {
             $this->trigger_error("malformed function-list for '$type' in register_resource");
@@ -830,8 +824,7 @@ function register_resource($type, $functions)
      *
      * @param string $type name of resource
      */
-    function unregister_resource($type)
-    {
+    function unregister_resource($type) {
         unset($this->_plugins['resource'][$type]);
     }
 
@@ -841,8 +834,7 @@ function unregister_resource($type)
      *
      * @param callback $function
      */
-    function register_prefilter($function)
-    {
+    function register_prefilter($function) {
         $this->_plugins['prefilter'][$this->_get_filter_name($function)]
             = array($function, null, null, false);
     }
@@ -852,8 +844,7 @@ function register_prefilter($function)
      *
      * @param callback $function
      */
-    function unregister_prefilter($function)
-    {
+    function unregister_prefilter($function) {
         unset($this->_plugins['prefilter'][$this->_get_filter_name($function)]);
     }
 
@@ -863,8 +854,7 @@ function unregister_prefilter($function)
      *
      * @param callback $function
      */
-    function register_postfilter($function)
-    {
+    function register_postfilter($function) {
         $this->_plugins['postfilter'][$this->_get_filter_name($function)]
             = array($function, null, null, false);
     }
@@ -874,8 +864,7 @@ function register_postfilter($function)
      *
      * @param callback $function
      */
-    function unregister_postfilter($function)
-    {
+    function unregister_postfilter($function) {
         unset($this->_plugins['postfilter'][$this->_get_filter_name($function)]);
     }
 
@@ -885,8 +874,7 @@ function unregister_postfilter($function)
      *
      * @param callback $function
      */
-    function register_outputfilter($function)
-    {
+    function register_outputfilter($function) {
         $this->_plugins['outputfilter'][$this->_get_filter_name($function)]
             = array($function, null, null, false);
     }
@@ -896,8 +884,7 @@ function register_outputfilter($function)
      *
      * @param callback $function
      */
-    function unregister_outputfilter($function)
-    {
+    function unregister_outputfilter($function) {
         unset($this->_plugins['outputfilter'][$this->_get_filter_name($function)]);
     }
 
@@ -907,8 +894,7 @@ function unregister_outputfilter($function)
      * @param string $type filter type
      * @param string $name filter name
      */
-    function load_filter($type, $name)
-    {
+    function load_filter($type, $name) {
         switch ($type) {
             case 'output':
                 $_params = array('plugins' => array(array($type . 'filter', $name, null, null, false)));
@@ -918,8 +904,9 @@ function load_filter($type, $name)
 
             case 'pre':
             case 'post':
-                if (!isset($this->_plugins[$type . 'filter'][$name]))
+                if (!isset($this->_plugins[$type . 'filter'][$name])) {
                     $this->_plugins[$type . 'filter'][$name] = false;
+                }
                 break;
         }
     }
@@ -933,25 +920,28 @@ function load_filter($type, $name)
      * @param string $exp_time expiration time
      * @return boolean
      */
-    function clear_cache($tpl_file = null, $cache_id = null, $compile_id = null, $exp_time = null)
-    {
+    function clear_cache($tpl_file = null, $cache_id = null, $compile_id = null, $exp_time = null) {
 
-        if (!isset($compile_id))
+        if (!isset($compile_id)) {
             $compile_id = $this->compile_id;
+        }
 
-        if (!isset($tpl_file))
+        if (!isset($tpl_file)) {
             $compile_id = null;
+        }
 
         $_auto_id = $this->_get_auto_id($cache_id, $compile_id);
 
         if (!empty($this->cache_handler_func)) {
             return call_user_func_array($this->cache_handler_func,
-                                  array('clear', &$this, &$dummy, $tpl_file, $cache_id, $compile_id, $exp_time));
+                array('clear', &$this, &$dummy, $tpl_file, $cache_id, $compile_id, $exp_time));
         } else {
-            $_params = array('auto_base' => $this->cache_dir,
-                            'auto_source' => $tpl_file,
-                            'auto_id' => $_auto_id,
-                            'exp_time' => $exp_time);
+            $_params = array(
+                'auto_base' => $this->cache_dir,
+                'auto_source' => $tpl_file,
+                'auto_id' => $_auto_id,
+                'exp_time' => $exp_time
+            );
             require_once(SMARTY_CORE_DIR . 'core.rm_auto.php');
             return smarty_core_rm_auto($_params, $this);
         }
@@ -965,8 +955,7 @@ function clear_cache($tpl_file = null, $cache_id = null, $compile_id = null, $ex
      * @param string $exp_time expire time
      * @return boolean results of {@link smarty_core_rm_auto()}
      */
-    function clear_all_cache($exp_time = null)
-    {
+    function clear_all_cache($exp_time = null) {
         return $this->clear_cache(null, null, null, $exp_time);
     }
 
@@ -979,13 +968,14 @@ function clear_all_cache($exp_time = null)
      * @param string $compile_id
      * @return string|false results of {@link _read_cache_file()}
      */
-    function is_cached($tpl_file, $cache_id = null, $compile_id = null)
-    {
-        if (!$this->caching)
+    function is_cached($tpl_file, $cache_id = null, $compile_id = null) {
+        if (!$this->caching) {
             return false;
+        }
 
-        if (!isset($compile_id))
+        if (!isset($compile_id)) {
             $compile_id = $this->compile_id;
+        }
 
         $_params = array(
             'tpl_file' => $tpl_file,
@@ -1001,8 +991,7 @@ function is_cached($tpl_file, $cache_id = null, $compile_id = null)
      * clear all the assigned template variables.
      *
      */
-    function clear_all_assign()
-    {
+    function clear_all_assign() {
         $this->_tpl_vars = array();
     }
 
@@ -1016,18 +1005,22 @@ function clear_all_assign()
      * @param string $exp_time
      * @return boolean results of {@link smarty_core_rm_auto()}
      */
-    function clear_compiled_tpl($tpl_file = null, $compile_id = null, $exp_time = null)
-    {
-        if (!isset($compile_id)) {
-            $compile_id = $this->compile_id;
-        }
-        $_params = array('auto_base' => $this->compile_dir,
-                        'auto_source' => $tpl_file,
-                        'auto_id' => $compile_id,
-                        'exp_time' => $exp_time,
-                        'extensions' => array('.inc', '.php'));
-        require_once(SMARTY_CORE_DIR . 'core.rm_auto.php');
-        return smarty_core_rm_auto($_params, $this);
+    function clear_compiled_tpl($tpl_file = null, $compile_id = null, $exp_time = null) {
+//        if (!isset($compile_id)) {
+//            $compile_id = $this->compile_id;
+//        }
+//        $_params = array(
+//            'auto_base' => $this->compile_dir,
+//            'auto_source' => $tpl_file,
+//            'auto_id' => $compile_id,
+//            'exp_time' => $exp_time,
+//            'extensions' => array('.inc', '.php')
+//        );
+//        require_once(SMARTY_CORE_DIR . 'core.rm_auto.php');
+//        return smarty_core_rm_auto($_params, $this);
+
+        cache_clear_all(NULL, 'cache_smarty');
+        return TRUE;
     }
 
     /**
@@ -1036,9 +1029,8 @@ function clear_compiled_tpl($tpl_file = null, $compile_id = null, $exp_time = nu
      * @param string $tpl_file
      * @return boolean
      */
-    function template_exists($tpl_file)
-    {
-        $_params = array('resource_name' => $tpl_file, 'quiet'=>true, 'get_source'=>false);
+    function template_exists($tpl_file) {
+        $_params = array('resource_name' => $tpl_file, 'quiet' => true, 'get_source' => false);
         return $this->_fetch_resource_info($_params);
     }
 
@@ -1049,11 +1041,10 @@ function template_exists($tpl_file)
      * @param string $type
      * @return array
      */
-    function &get_template_vars($name=null)
-    {
-        if(!isset($name)) {
+    function &get_template_vars($name = null) {
+        if (!isset($name)) {
             return $this->_tpl_vars;
-        } elseif(isset($this->_tpl_vars[$name])) {
+        } elseif (isset($this->_tpl_vars[$name])) {
             return $this->_tpl_vars[$name];
         } else {
             // var non-existant, return valid reference
@@ -1069,16 +1060,17 @@ function &get_template_vars($name=null)
      * @param string $type
      * @return array
      */
-    function &get_config_vars($name=null)
-    {
-        if(!isset($name) && is_array($this->_config[0])) {
+    function &get_config_vars($name = null) {
+        if (!isset($name) && is_array($this->_config[0])) {
             return $this->_config[0]['vars'];
-        } else if(isset($this->_config[0]['vars'][$name])) {
-            return $this->_config[0]['vars'][$name];
         } else {
-            // var non-existant, return valid reference
-            $_tmp = null;
-            return $_tmp;
+            if (isset($this->_config[0]['vars'][$name])) {
+                return $this->_config[0]['vars'][$name];
+            } else {
+                // var non-existant, return valid reference
+                $_tmp = null;
+                return $_tmp;
+            }
         }
     }
 
@@ -1088,8 +1080,7 @@ function &get_config_vars($name=null)
      * @param string $error_msg
      * @param integer $error_type
      */
-    function trigger_error($error_msg, $error_type = E_USER_WARNING)
-    {
+    function trigger_error($error_msg, $error_type = E_USER_WARNING) {
         $msg = htmlentities($error_msg);
         trigger_error("Smarty error: $msg", $error_type);
     }
@@ -1102,8 +1093,7 @@ function trigger_error($error_msg, $error_type = E_USER_WARNING)
      * @param string $cache_id
      * @param string $compile_id
      */
-    function display($resource_name, $cache_id = null, $compile_id = null)
-    {
+    function display($resource_name, $cache_id = null, $compile_id = null) {
         $this->fetch($resource_name, $cache_id, $compile_id, true);
     }
 
@@ -1115,15 +1105,17 @@ function display($resource_name, $cache_id = null, $compile_id = null)
      * @param string $compile_id
      * @param boolean $display
      */
-    function fetch($resource_name, $cache_id = null, $compile_id = null, $display = false)
-    {
+    function fetch($resource_name, $cache_id = null, $compile_id = null, $display = false) {
         static $_cache_info = array();
 
-        $_smarty_old_error_level = $this->debugging ? error_reporting() : error_reporting(isset($this->error_reporting)
-               ? $this->error_reporting : error_reporting() & ~E_NOTICE);
+        $_smarty_old_error_level = $this->debugging
+            ? error_reporting()
+            : error_reporting(isset($this->error_reporting)
+                ? $this->error_reporting : error_reporting() & ~E_NOTICE);
 
         if (!$this->debugging && $this->debugging_ctrl == 'URL') {
-            $_query_string = $this->request_use_auto_globals ? $_SERVER['QUERY_STRING'] : $GLOBALS['HTTP_SERVER_VARS']['QUERY_STRING'];
+            $_query_string = $this->request_use_auto_globals ? $_SERVER['QUERY_STRING']
+                : $GLOBALS['HTTP_SERVER_VARS']['QUERY_STRING'];
             if (@strstr($_query_string, $this->_smarty_debug_id)) {
                 if (@strstr($_query_string, $this->_smarty_debug_id . '=on')) {
                     // enable debugging for this browser session
@@ -1138,7 +1130,8 @@ function fetch($resource_name, $cache_id = null, $compile_id = null, $display =
                     $this->debugging = true;
                 }
             } else {
-                $this->debugging = (bool)($this->request_use_auto_globals ? @$_COOKIE['SMARTY_DEBUG'] : @$GLOBALS['HTTP_COOKIE_VARS']['SMARTY_DEBUG']);
+                $this->debugging = (bool)($this->request_use_auto_globals ? @$_COOKIE['SMARTY_DEBUG']
+                    : @$GLOBALS['HTTP_COOKIE_VARS']['SMARTY_DEBUG']);
             }
         }
 
@@ -1147,9 +1140,11 @@ function fetch($resource_name, $cache_id = null, $compile_id = null, $display =
             $_params = array();
             require_once(SMARTY_CORE_DIR . 'core.get_microtime.php');
             $_debug_start_time = smarty_core_get_microtime($_params, $this);
-            $this->_smarty_debug_info[] = array('type'      => 'template',
-                                                'filename'  => $resource_name,
-                                                'depth'     => 0);
+            $this->_smarty_debug_info[] = array(
+                'type' => 'template',
+                'filename' => $resource_name,
+                'depth' => 0
+            );
             $_included_tpls_idx = count($this->_smarty_debug_info) - 1;
         }
 
@@ -1189,33 +1184,36 @@ function fetch($resource_name, $cache_id = null, $compile_id = null, $display =
 
 
                 if ($display) {
-                    if ($this->debugging)
-                    {
+                    if ($this->debugging) {
                         // capture time for debugging info
                         $_params = array();
                         require_once(SMARTY_CORE_DIR . 'core.get_microtime.php');
-                        $this->_smarty_debug_info[$_included_tpls_idx]['exec_time'] = smarty_core_get_microtime($_params, $this) - $_debug_start_time;
+                        $this->_smarty_debug_info[$_included_tpls_idx]['exec_time'] =
+                            smarty_core_get_microtime($_params, $this) - $_debug_start_time;
                         require_once(SMARTY_CORE_DIR . 'core.display_debug_console.php');
                         $_smarty_results .= smarty_core_display_debug_console($_params, $this);
                     }
                     if ($this->cache_modified_check) {
                         $_server_vars = ($this->request_use_auto_globals) ? $_SERVER : $GLOBALS['HTTP_SERVER_VARS'];
-                        $_last_modified_date = @substr($_server_vars['HTTP_IF_MODIFIED_SINCE'], 0, strpos($_server_vars['HTTP_IF_MODIFIED_SINCE'], 'GMT') + 3);
-                        $_gmt_mtime = gmdate('D, d M Y H:i:s', $this->_cache_info['timestamp']).' GMT';
+                        $_last_modified_date = @substr($_server_vars['HTTP_IF_MODIFIED_SINCE'], 0,
+                            strpos($_server_vars['HTTP_IF_MODIFIED_SINCE'], 'GMT') + 3);
+                        $_gmt_mtime = gmdate('D, d M Y H:i:s', $this->_cache_info['timestamp']) . ' GMT';
                         if (@count($this->_cache_info['insert_tags']) == 0
-                            && !$this->_cache_serials
-                            && $_gmt_mtime == $_last_modified_date) {
-                            if (php_sapi_name()=='cgi')
+                             && !$this->_cache_serials
+                             && $_gmt_mtime == $_last_modified_date
+                        ) {
+                            if (php_sapi_name() == 'cgi') {
                                 header('Status: 304 Not Modified');
-                            else
+                            } else {
                                 header('HTTP/1.1 304 Not Modified');
+                            }
 
                         } else {
-                            header('Last-Modified: '.$_gmt_mtime);
+                            header('Last-Modified: ' . $_gmt_mtime);
                             echo $_smarty_results;
                         }
                     } else {
-                            echo $_smarty_results;
+                        echo $_smarty_results;
                     }
                     error_reporting($_smarty_old_error_level);
                     // restore initial cache_info
@@ -1230,7 +1228,7 @@ function fetch($resource_name, $cache_id = null, $compile_id = null, $display =
             } else {
                 $this->_cache_info['template'][$resource_name] = true;
                 if ($this->cache_modified_check && $display) {
-                    header('Last-Modified: '.gmdate('D, d M Y H:i:s', time()).' GMT');
+                    header('Last-Modified: ' . gmdate('D, d M Y H:i:s', time()) . ' GMT');
                 }
             }
         }
@@ -1252,17 +1250,26 @@ function fetch($resource_name, $cache_id = null, $compile_id = null, $display =
         $this->_cache_including = false;
         if ($display && !$this->caching && count($this->_plugins['outputfilter']) == 0) {
             if ($this->_is_compiled($resource_name, $_smarty_compile_path)
-                    || $this->_compile_resource($resource_name, $_smarty_compile_path))
-            {
-                include($_smarty_compile_path);
+                || $this->_compile_resource($resource_name, $_smarty_compile_path)
+            ) {
+                $get = cache_get($_smarty_compile_path, 'cache_smarty');
+                if($get){
+                    eval('?>' . $get->data . '<?php ');
+                } else {
+                    watchdog('smarty error 1', 'not in cache: ' . $_smarty_compile_path);
+                }
             }
         } else {
             ob_start();
             if ($this->_is_compiled($resource_name, $_smarty_compile_path)
-                    || $this->_compile_resource($resource_name, $_smarty_compile_path))
-            {
-                include($_smarty_compile_path);
-            }
+                || $this->_compile_resource($resource_name, $_smarty_compile_path)
+            ) {
+                $get = cache_get($_smarty_compile_path, 'cache_smarty');
+                if($get){
+                    eval('?>' . $get->data . '<?php ');
+                } else {
+                    watchdog('smarty error 2', 'not in cache: ' . $_smarty_compile_path);
+                }            }
             $_smarty_results = ob_get_contents();
             ob_end_clean();
 
@@ -1272,10 +1279,12 @@ function fetch($resource_name, $cache_id = null, $compile_id = null, $display =
         }
 
         if ($this->caching) {
-            $_params = array('tpl_file' => $resource_name,
-                        'cache_id' => $cache_id,
-                        'compile_id' => $compile_id,
-                        'results' => $_smarty_results);
+            $_params = array(
+                'tpl_file' => $resource_name,
+                'cache_id' => $cache_id,
+                'compile_id' => $compile_id,
+                'results' => $_smarty_results
+            );
             require_once(SMARTY_CORE_DIR . 'core.write_cache_file.php');
             smarty_core_write_cache_file($_params, $this);
             require_once(SMARTY_CORE_DIR . 'core.process_cached_inserts.php');
@@ -1284,8 +1293,8 @@ function fetch($resource_name, $cache_id = null, $compile_id = null, $display =
             if ($this->_cache_serials) {
                 // strip nocache-tags from output
                 $_smarty_results = preg_replace('!(\{/?nocache\:[0-9a-f]{32}#\d+\})!s'
-                                                ,''
-                                                ,$_smarty_results);
+                    , ''
+                    , $_smarty_results);
             }
             // restore initial cache_info
             $this->_cache_info = array_pop($_cache_info);
@@ -1293,12 +1302,15 @@ function fetch($resource_name, $cache_id = null, $compile_id = null, $display =
         $this->_cache_including = $_cache_including;
 
         if ($display) {
-            if (isset($_smarty_results)) { echo $_smarty_results; }
+            if (isset($_smarty_results)) {
+                echo $_smarty_results;
+            }
             if ($this->debugging) {
                 // capture time for debugging info
                 $_params = array();
                 require_once(SMARTY_CORE_DIR . 'core.get_microtime.php');
-                $this->_smarty_debug_info[$_included_tpls_idx]['exec_time'] = (smarty_core_get_microtime($_params, $this) - $_debug_start_time);
+                $this->_smarty_debug_info[$_included_tpls_idx]['exec_time'] =
+                    (smarty_core_get_microtime($_params, $this) - $_debug_start_time);
                 require_once(SMARTY_CORE_DIR . 'core.display_debug_console.php');
                 echo smarty_core_display_debug_console($_params, $this);
             }
@@ -1306,8 +1318,120 @@ function fetch($resource_name, $cache_id = null, $compile_id = null, $display =
             return;
         } else {
             error_reporting($_smarty_old_error_level);
-            if (isset($_smarty_results)) { return $_smarty_results; }
+            if (isset($_smarty_results)) {
+                return $_smarty_results;
+            }
+        }
+    }
+
+
+    /**
+     * Precompile smarty tempaltes
+     * @param $resource_name
+     * @param null $cache_id
+     * @param null $compile_id
+     * @param bool $display
+     * @return bool|string
+     */
+    function precompile($resource_name, $cache_id = null, $compile_id = null, $display = false) {
+        static $_cache_info = array();
+
+        $_smarty_old_error_level = $this->debugging
+            ? error_reporting()
+            : error_reporting(isset($this->error_reporting)
+                ? $this->error_reporting : error_reporting() & ~E_NOTICE);
+
+        if (!$this->debugging && $this->debugging_ctrl == 'URL') {
+            $_query_string = $this->request_use_auto_globals ? $_SERVER['QUERY_STRING']
+                : $GLOBALS['HTTP_SERVER_VARS']['QUERY_STRING'];
+            if (@strstr($_query_string, $this->_smarty_debug_id)) {
+                if (@strstr($_query_string, $this->_smarty_debug_id . '=on')) {
+                    // enable debugging for this browser session
+                    @setcookie('SMARTY_DEBUG', true);
+                    $this->debugging = true;
+                } elseif (@strstr($_query_string, $this->_smarty_debug_id . '=off')) {
+                    // disable debugging for this browser session
+                    @setcookie('SMARTY_DEBUG', false);
+                    $this->debugging = false;
+                } else {
+                    // enable debugging for this page
+                    $this->debugging = true;
+                }
+            } else {
+                $this->debugging = (bool)($this->request_use_auto_globals ? @$_COOKIE['SMARTY_DEBUG']
+                    : @$GLOBALS['HTTP_COOKIE_VARS']['SMARTY_DEBUG']);
+            }
+        }
+
+        if ($this->debugging) {
+            // capture time for debugging info
+            $_params = array();
+            require_once(SMARTY_CORE_DIR . 'core.get_microtime.php');
+            $_debug_start_time = smarty_core_get_microtime($_params, $this);
+            $this->_smarty_debug_info[] = array(
+                'type' => 'template',
+                'filename' => $resource_name,
+                'depth' => 0
+            );
+            $_included_tpls_idx = count($this->_smarty_debug_info) - 1;
+        }
+
+        if (!isset($compile_id)) {
+            $compile_id = $this->compile_id;
+        }
+
+        $this->_compile_id = $compile_id;
+        $this->_inclusion_depth = 0;
+
+
+
+
+        // load filters that are marked as autoload
+        if (count($this->autoload_filters)) {
+            foreach ($this->autoload_filters as $_filter_type => $_filters) {
+                foreach ($_filters as $_filter) {
+                    $this->load_filter($_filter_type, $_filter);
+                }
+            }
         }
+
+        $_smarty_compile_path = $this->_get_compile_path($resource_name);
+
+        // if we just need to display the results, don't perform output
+        // buffering - for speed
+        $_cache_including = $this->_cache_including;
+        $this->_cache_including = false;
+        if ($display && !$this->caching && count($this->_plugins['outputfilter']) == 0) {
+            if ($this->_is_compiled($resource_name, $_smarty_compile_path)
+                || $this->_compile_resource($resource_name, $_smarty_compile_path)
+            ) {
+                $get = cache_get($_smarty_compile_path, 'cache_smarty');
+                if($get){
+                    eval('?>' . $get->data . '<?php ');
+                } else {
+                    watchdog('smarty error 3', 'not in cache: ' . $_smarty_compile_path);
+                }
+            }
+        } else {
+            ob_start();
+            if ($this->_is_compiled($resource_name, $_smarty_compile_path)
+                || $this->_compile_resource($resource_name, $_smarty_compile_path)
+            ) {
+                $get = cache_get($_smarty_compile_path, 'cache_smarty');
+                if($get){
+                    eval('?>' . $get->data . '<?php ');
+                } else {
+                    watchdog('smarty error 4', 'not in cache: ' . $_smarty_compile_path);
+                }            }
+            $_smarty_results = ob_get_contents();
+            ob_end_clean();
+
+            foreach ((array)$this->_plugins['outputfilter'] as $_output_filter) {
+                $_smarty_results = call_user_func_array($_output_filter[0], array($_smarty_results, &$this));
+            }
+        }
+
+
     }
 
     /**
@@ -1317,8 +1441,7 @@ function fetch($resource_name, $cache_id = null, $compile_id = null, $display =
      * @param string $section
      * @param string $scope
      */
-    function config_load($file, $section = null, $scope = 'global')
-    {
+    function config_load($file, $section = null, $scope = 'global') {
         require_once($this->_get_plugin_filepath('function', 'config_load'));
         smarty_function_config_load(array('file' => $file, 'section' => $section, 'scope' => $scope), $this);
     }
@@ -1330,11 +1453,13 @@ function config_load($file, $section = null, $scope = 'global')
      * @return object
      */
     function &get_registered_object($name) {
-        if (!isset($this->_reg_objects[$name]))
-        $this->_trigger_fatal_error("'$name' is not a registered object");
+        if (!isset($this->_reg_objects[$name])) {
+            $this->_trigger_fatal_error("'$name' is not a registered object");
+        }
 
-        if (!is_object($this->_reg_objects[$name][0]))
-        $this->_trigger_fatal_error("registered '$name' is not an object");
+        if (!is_object($this->_reg_objects[$name][0])) {
+            $this->_trigger_fatal_error("registered '$name' is not an object");
+        }
 
         return $this->_reg_objects[$name][0];
     }
@@ -1344,12 +1469,15 @@ function &get_registered_object($name) {
      *
      * @param string $var
      */
-    function clear_config($var = null)
-    {
-        if(!isset($var)) {
+    function clear_config($var = null) {
+        if (!isset($var)) {
             // clear all values
-            $this->_config = array(array('vars'  => array(),
-                                         'files' => array()));
+            $this->_config = array(
+                array(
+                    'vars' => array(),
+                    'files' => array()
+                )
+            );
         } else {
             unset($this->_config[0]['vars'][$var]);
         }
@@ -1362,29 +1490,27 @@ function clear_config($var = null)
      * @param string $name
      * @return string|false
      */
-    function _get_plugin_filepath($type, $name)
-    {
+    function _get_plugin_filepath($type, $name) {
         $_params = array('type' => $type, 'name' => $name);
         require_once(SMARTY_CORE_DIR . 'core.assemble_plugin_filepath.php');
         return smarty_core_assemble_plugin_filepath($_params, $this);
     }
 
-   /**
+    /**
      * test if resource needs compiling
      *
      * @param string $resource_name
      * @param string $compile_path
      * @return boolean
      */
-    function _is_compiled($resource_name, $compile_path)
-    {
+    function _is_compiled($resource_name, $compile_path) {
         if (!$this->force_compile && file_exists($compile_path)) {
             if (!$this->compile_check) {
                 // no need to check compiled file
                 return true;
             } else {
                 // get file source and timestamp
-                $_params = array('resource_name' => $resource_name, 'get_source'=>false);
+                $_params = array('resource_name' => $resource_name, 'get_source' => false);
                 if (!$this->_fetch_resource_info($_params)) {
                     return false;
                 }
@@ -1402,15 +1528,14 @@ function _is_compiled($resource_name, $compile_path)
         }
     }
 
-   /**
+    /**
      * compile the template
      *
      * @param string $resource_name
      * @param string $compile_path
      * @return boolean
      */
-    function _compile_resource($resource_name, $compile_path)
-    {
+    function _compile_resource($resource_name, $compile_path) {
 
         $_params = array('resource_name' => $resource_name);
         if (!$this->_fetch_resource_info($_params)) {
@@ -1418,16 +1543,17 @@ function _compile_resource($resource_name, $compile_path)
         }
 
         $_source_content = $_params['source_content'];
-        $_cache_include    = substr($compile_path, 0, -4).'.inc';
+        $_cache_include = substr($compile_path, 0, -4) . '.inc';
 
         if ($this->_compile_source($resource_name, $_source_content, $_compiled_content, $_cache_include)) {
             // if a _cache_serial was set, we also have to write an include-file:
             if ($this->_cache_include_info) {
                 require_once(SMARTY_CORE_DIR . 'core.write_compiled_include.php');
-                smarty_core_write_compiled_include(array_merge($this->_cache_include_info, array('compiled_content'=>$_compiled_content, 'resource_name'=>$resource_name)),  $this);
+                smarty_core_write_compiled_include(array_merge($this->_cache_include_info,
+                    array('compiled_content' => $_compiled_content, 'resource_name' => $resource_name)), $this);
             }
 
-            $_params = array('compile_path'=>$compile_path, 'compiled_content' => $_compiled_content);
+            $_params = array('compile_path' => $compile_path, 'compiled_content' => $_compiled_content);
             require_once(SMARTY_CORE_DIR . 'core.write_compiled_resource.php');
             smarty_core_write_compiled_resource($_params, $this);
 
@@ -1438,7 +1564,7 @@ function _compile_resource($resource_name, $compile_path)
 
     }
 
-   /**
+    /**
      * compile the given source
      *
      * @param string $resource_name
@@ -1446,8 +1572,8 @@ function _compile_resource($resource_name, $compile_path)
      * @param string $compiled_content
      * @return boolean
      */
-    function _compile_source($resource_name, &$source_content, &$compiled_content, $cache_include_path=null)
-    {
+    function _compile_source($resource_name, &$source_content, &$compiled_content, $cache_include_path = null) {
+
         if (file_exists(SMARTY_DIR . $this->compiler_file)) {
             require_once(SMARTY_DIR . $this->compiler_file);
         } else {
@@ -1458,28 +1584,28 @@ function _compile_source($resource_name, &$source_content, &$compiled_content, $
 
         $smarty_compiler = new $this->compiler_class;
 
-        $smarty_compiler->template_dir      = $this->template_dir;
-        $smarty_compiler->compile_dir       = $this->compile_dir;
-        $smarty_compiler->plugins_dir       = $this->plugins_dir;
-        $smarty_compiler->config_dir        = $this->config_dir;
-        $smarty_compiler->force_compile     = $this->force_compile;
-        $smarty_compiler->caching           = $this->caching;
-        $smarty_compiler->php_handling      = $this->php_handling;
-        $smarty_compiler->left_delimiter    = $this->left_delimiter;
-        $smarty_compiler->right_delimiter   = $this->right_delimiter;
-        $smarty_compiler->_version          = $this->_version;
-        $smarty_compiler->security          = $this->security;
-        $smarty_compiler->secure_dir        = $this->secure_dir;
+        $smarty_compiler->template_dir = $this->template_dir;
+        $smarty_compiler->compile_dir = $this->compile_dir;
+        $smarty_compiler->plugins_dir = $this->plugins_dir;
+        $smarty_compiler->config_dir = $this->config_dir;
+        $smarty_compiler->force_compile = $this->force_compile;
+        $smarty_compiler->caching = $this->caching;
+        $smarty_compiler->php_handling = $this->php_handling;
+        $smarty_compiler->left_delimiter = $this->left_delimiter;
+        $smarty_compiler->right_delimiter = $this->right_delimiter;
+        $smarty_compiler->_version = $this->_version;
+        $smarty_compiler->security = $this->security;
+        $smarty_compiler->secure_dir = $this->secure_dir;
         $smarty_compiler->security_settings = $this->security_settings;
-        $smarty_compiler->trusted_dir       = $this->trusted_dir;
-        $smarty_compiler->use_sub_dirs      = $this->use_sub_dirs;
-        $smarty_compiler->_reg_objects      = &$this->_reg_objects;
-        $smarty_compiler->_plugins          = &$this->_plugins;
-        $smarty_compiler->_tpl_vars         = &$this->_tpl_vars;
+        $smarty_compiler->trusted_dir = $this->trusted_dir;
+        $smarty_compiler->use_sub_dirs = $this->use_sub_dirs;
+        $smarty_compiler->_reg_objects = & $this->_reg_objects;
+        $smarty_compiler->_plugins = & $this->_plugins;
+        $smarty_compiler->_tpl_vars = & $this->_tpl_vars;
         $smarty_compiler->default_modifiers = $this->default_modifiers;
-        $smarty_compiler->compile_id        = $this->_compile_id;
-        $smarty_compiler->_config            = $this->_config;
-        $smarty_compiler->request_use_auto_globals  = $this->request_use_auto_globals;
+        $smarty_compiler->compile_id = $this->_compile_id;
+        $smarty_compiler->_config = $this->_config;
+        $smarty_compiler->request_use_auto_globals = $this->request_use_auto_globals;
 
         if (isset($cache_include_path) && isset($this->_cache_serials[$cache_include_path])) {
             $smarty_compiler->_cache_serial = $this->_cache_serials[$cache_include_path];
@@ -1491,9 +1617,10 @@ function _compile_source($resource_name, &$source_content, &$compiled_content, $
 
         if ($smarty_compiler->_cache_serial) {
             $this->_cache_include_info = array(
-                'cache_serial'=>$smarty_compiler->_cache_serial
-                ,'plugins_code'=>$smarty_compiler->_plugins_code
-                ,'include_file_path' => $cache_include_path);
+                'cache_serial' => $smarty_compiler->_cache_serial
+                , 'plugins_code' => $smarty_compiler->_plugins_code
+                , 'include_file_path' => $cache_include_path
+            );
 
         } else {
             $this->_cache_include_info = null;
@@ -1509,24 +1636,23 @@ function _compile_source($resource_name, &$source_content, &$compiled_content, $
      * @param string $resource_name
      * @return string results of {@link _get_auto_filename()}
      */
-    function _get_compile_path($resource_name)
-    {
-        $compilePath = $this->_get_auto_filename( $this->compile_dir,
-                                                  $resource_name,
-                                                  $this->_compile_id );
+    function _get_compile_path($resource_name) {
+        $compilePath = $this->_get_auto_filename($this->compile_dir,
+            $resource_name,
+            $this->_compile_id);
         $compilePath .= '.php';
 
         //for 'string:' resource smarty might going to fail to create
         //compile file, so make sure we should have valid path, CRM-5890
-        $matches = array( );
-        if ( preg_match( '/^(\s+)?string:/', $resource_name, $matches ) ) {
-            if ( !$this->validateCompilePath( $compilePath ) ) {
-                $compilePath = $this->_get_auto_filename( $this->compile_dir,
-                                                          time().rand(),
-                                                          $this->_compile_id );
-                $compilePath .= '.php';
-            }
-        }
+//        $matches = array();
+//        if (preg_match('/^(\s+)?string:/', $resource_name, $matches)) {
+//            if (!$this->validateCompilePath($compilePath)) {
+//                $compilePath = $this->_get_auto_filename($this->compile_dir,
+//                    time() . rand(),
+//                    $this->_compile_id);
+//                $compilePath .= '.php';
+//            }
+//        }
 
         return $compilePath;
     }
@@ -1534,18 +1660,18 @@ function _get_compile_path($resource_name)
     /**
      *  do check can smarty create a file w/ given path.
      */
-    function validateCompilePath( $compilePath ) {
+    function validateCompilePath($compilePath) {
         //first check for directory.
-        $dirname = dirname( $compilePath );
-        if ( !is_dir( $dirname ) ) {
+        $dirname = dirname($compilePath);
+        if (!is_dir($dirname)) {
             require_once(SMARTY_CORE_DIR . 'core.create_dir_structure.php');
-            smarty_core_create_dir_structure( array('dir' => $dirname ), $this );
+            smarty_core_create_dir_structure(array('dir' => $dirname), $this);
         }
 
         $isValid = false;
-        if ( $fd = @fopen( $compilePath, 'wb') ) {
+        if ($fd = @fopen($compilePath, 'wb')) {
             $isValid = true;
-            @fclose( $fd );
+            @fclose($fd);
             @unlink($compilePath);
         }
 
@@ -1566,17 +1692,21 @@ function validateCompilePath( $compilePath ) {
      * @return boolean
      */
 
-    function _fetch_resource_info(&$params)
-    {
-        if(!isset($params['get_source'])) { $params['get_source'] = true; }
-        if(!isset($params['quiet'])) { $params['quiet'] = false; }
+    function _fetch_resource_info(&$params) {
+        if (!isset($params['get_source'])) {
+            $params['get_source'] = true;
+        }
+        if (!isset($params['quiet'])) {
+            $params['quiet'] = false;
+        }
 
         $_return = false;
-        $_params = array('resource_name' => $params['resource_name']) ;
-        if (isset($params['resource_base_path']))
+        $_params = array('resource_name' => $params['resource_name']);
+        if (isset($params['resource_base_path'])) {
             $_params['resource_base_path'] = $params['resource_base_path'];
-        else
+        } else {
             $_params['resource_base_path'] = $this->template_dir;
+        }
 
         if ($this->_parse_resource_name($_params)) {
             $_resource_type = $_params['resource_type'];
@@ -1593,16 +1723,16 @@ function _fetch_resource_info(&$params)
                 default:
                     // call resource functions to fetch the template source and timestamp
                     if ($params['get_source']) {
-                        $_source_return = isset($this->_plugins['resource'][$_resource_type]) &&
-                            call_user_func_array($this->_plugins['resource'][$_resource_type][0][0],
-                                                 array($_resource_name, &$params['source_content'], &$this));
+                        $_source_return = isset($this->_plugins['resource'][$_resource_type])
+                                          && call_user_func_array($this->_plugins['resource'][$_resource_type][0][0],
+                                array($_resource_name, &$params['source_content'], &$this));
                     } else {
                         $_source_return = true;
                     }
 
-                    $_timestamp_return = isset($this->_plugins['resource'][$_resource_type]) &&
-                        call_user_func_array($this->_plugins['resource'][$_resource_type][0][1],
-                                             array($_resource_name, &$params['resource_timestamp'], &$this));
+                    $_timestamp_return = isset($this->_plugins['resource'][$_resource_type])
+                                         && call_user_func_array($this->_plugins['resource'][$_resource_type][0][1],
+                            array($_resource_name, &$params['resource_timestamp'], &$this));
 
                     $_return = $_source_return && $_timestamp_return;
                     break;
@@ -1617,7 +1747,10 @@ function _fetch_resource_info(&$params)
                 } else {
                     $_return = call_user_func_array(
                         $this->default_template_handler_func,
-                        array($_params['resource_type'], $_params['resource_name'], &$params['source_content'], &$params['resource_timestamp'], &$this));
+                        array(
+                            $_params['resource_type'], $_params['resource_name'], &$params['source_content'],
+                            &$params['resource_timestamp'], &$this
+                        ));
                 }
             }
         }
@@ -1626,14 +1759,18 @@ function _fetch_resource_info(&$params)
             if (!$params['quiet']) {
                 $this->trigger_error('unable to read resource: "' . $params['resource_name'] . '"');
             }
-        } else if ($_return && $this->security) {
-            require_once(SMARTY_CORE_DIR . 'core.is_secure.php');
-            if (!smarty_core_is_secure($_params, $this)) {
-                if (!$params['quiet'])
-                    $this->trigger_error('(secure mode) accessing "' . $params['resource_name'] . '" is not allowed');
-                $params['source_content'] = null;
-                $params['resource_timestamp'] = null;
-                return false;
+        } else {
+            if ($_return && $this->security) {
+                require_once(SMARTY_CORE_DIR . 'core.is_secure.php');
+                if (!smarty_core_is_secure($_params, $this)) {
+                    if (!$params['quiet']) {
+                        $this->trigger_error('(secure mode) accessing "' . $params['resource_name']
+                                             . '" is not allowed');
+                    }
+                    $params['source_content'] = null;
+                    $params['resource_timestamp'] = null;
+                    return false;
+                }
             }
         }
         return $_return;
@@ -1650,8 +1787,7 @@ function _fetch_resource_info(&$params)
      * @return boolean
      */
 
-    function _parse_resource_name(&$params)
-    {
+    function _parse_resource_name(&$params) {
 
         // split tpl_path by the first colon
         $_resource_name_parts = explode(':', $params['resource_name'], 2);
@@ -1661,7 +1797,7 @@ function _parse_resource_name(&$params)
             $params['resource_type'] = $this->default_resource_type;
             $params['resource_name'] = $_resource_name_parts[0];
         } else {
-            if(strlen($_resource_name_parts[0]) == 1) {
+            if (strlen($_resource_name_parts[0]) == 1) {
                 // 1 char is not resource type, but part of filepath
                 $params['resource_type'] = $this->default_resource_type;
                 $params['resource_name'] = $params['resource_name'];
@@ -1684,7 +1820,7 @@ function _parse_resource_name(&$params)
                     // didn't find the file, try include_path
                     $_params = array('file_path' => $_fullpath);
                     require_once(SMARTY_CORE_DIR . 'core.get_include_path.php');
-                    if(smarty_core_get_include_path($_params, $this)) {
+                    if (smarty_core_get_include_path($_params, $this)) {
                         $params['resource_name'] = $_params['new_file_path'];
                         return true;
                     }
@@ -1711,8 +1847,7 @@ function _parse_resource_name(&$params)
      * @param array|null $map_array
      * @return string result of modifiers
      */
-    function _run_mod_handler()
-    {
+    function _run_mod_handler() {
         $_args = func_get_args();
         list($_modifier_name, $_map_array) = array_splice($_args, 0, 2);
         list($_func_name, $_tpl_file, $_tpl_line) =
@@ -1732,13 +1867,14 @@ function _run_mod_handler()
      * @param string $string
      * @return string
      */
-    function _dequote($string)
-    {
-        if ((substr($string, 0, 1) == "'" || substr($string, 0, 1) == '"') &&
-            substr($string, -1) == substr($string, 0, 1))
+    function _dequote($string) {
+        if ((substr($string, 0, 1) == "'" || substr($string, 0, 1) == '"')
+            && substr($string, -1) == substr($string, 0, 1)
+        ) {
             return substr($string, 1, -1);
-        else
+        } else {
             return $string;
+        }
     }
 
 
@@ -1748,9 +1884,8 @@ function _dequote($string)
      * @param string $filename
      * @return string
      */
-    function _read_file($filename)
-    {
-        if ( file_exists($filename) && is_readable($filename) && ($fd = @fopen($filename, 'rb')) ) {
+    function _read_file($filename) {
+        if (file_exists($filename) && is_readable($filename) && ($fd = @fopen($filename, 'rb'))) {
             $contents = '';
             while (!feof($fd)) {
                 $contents .= fread($fd, 8192);
@@ -1772,19 +1907,18 @@ function _read_file($filename)
      * @staticvar string|null
      * @staticvar string|null
      */
-    function _get_auto_filename($auto_base, $auto_source = null, $auto_id = null)
-    {
-        $_compile_dir_sep =  $this->use_sub_dirs ? DIRECTORY_SEPARATOR : '^';
+    function _get_auto_filename($auto_base, $auto_source = null, $auto_id = null) {
+        $_compile_dir_sep = $this->use_sub_dirs ? DIRECTORY_SEPARATOR : '^';
         $_return = $auto_base . DIRECTORY_SEPARATOR;
 
-        if(isset($auto_id)) {
+        if (isset($auto_id)) {
             // make auto_id safe for directory names
-            $auto_id = str_replace('%7C',$_compile_dir_sep,(urlencode($auto_id)));
+            $auto_id = str_replace('%7C', $_compile_dir_sep, (urlencode($auto_id)));
             // split into separate directories
             $_return .= $auto_id . $_compile_dir_sep;
         }
 
-        if(isset($auto_source)) {
+        if (isset($auto_source)) {
             // make source name safe for filename
             $_filename = urlencode(basename($auto_source));
             $_crc32 = sprintf('%08X', crc32($auto_source));
@@ -1804,10 +1938,9 @@ function _get_auto_filename($auto_base, $auto_source = null, $auto_id = null)
      * @param string $resource
      * @param integer $exp_time
      */
-    function _unlink($resource, $exp_time = null)
-    {
-        if(isset($exp_time)) {
-            if(time() - @filemtime($resource) >= $exp_time) {
+    function _unlink($resource, $exp_time = null) {
+        if (isset($exp_time)) {
+            if (time() - @filemtime($resource) >= $exp_time) {
                 return @unlink($resource);
             }
         } else {
@@ -1822,13 +1955,14 @@ function _unlink($resource, $exp_time = null)
      * @param string $compile_id
      * @return string|null
      */
-    function _get_auto_id($cache_id=null, $compile_id=null) {
-    if (isset($cache_id))
-        return (isset($compile_id)) ? $cache_id . '|' . $compile_id  : $cache_id;
-    elseif(isset($compile_id))
-        return $compile_id;
-    else
-        return null;
+    function _get_auto_id($cache_id = null, $compile_id = null) {
+        if (isset($cache_id)) {
+            return (isset($compile_id)) ? $cache_id . '|' . $compile_id : $cache_id;
+        } elseif (isset($compile_id)) {
+            return $compile_id;
+        } else {
+            return null;
+        }
     }
 
     /**
@@ -1842,10 +1976,9 @@ function _get_auto_id($cache_id=null, $compile_id=null) {
      * @param integer $error_type
      */
     function _trigger_fatal_error($error_msg, $tpl_file = null, $tpl_line = null,
-            $file = null, $line = null, $error_type = E_USER_ERROR)
-    {
-        if(isset($file) && isset($line)) {
-            $info = ' ('.basename($file).", line $line)";
+                                  $file = null, $line = null, $error_type = E_USER_ERROR) {
+        if (isset($file) && isset($line)) {
+            $info = ' (' . basename($file) . ", line $line)";
         } else {
             $info = '';
         }
@@ -1862,7 +1995,7 @@ function _trigger_fatal_error($error_msg, $tpl_file = null, $tpl_line = null,
      * @return string
      */
     function _process_compiled_include_callback($match) {
-        $_func = '_smarty_tplfunc_'.$match[2].'_'.$match[3];
+        $_func = '_smarty_tplfunc_' . $match[2] . '_' . $match[3];
         ob_start();
         $_func($this);
         $_ret = ob_get_contents();
@@ -1880,20 +2013,22 @@ function _process_compiled_include_callback($match) {
 
     // $_smarty_include_tpl_file, $_smarty_include_vars
 
-    function _smarty_include($params)
-    {
+    function _smarty_include($params) {
         if ($this->debugging) {
             $_params = array();
             require_once(SMARTY_CORE_DIR . 'core.get_microtime.php');
             $debug_start_time = smarty_core_get_microtime($_params, $this);
-            $this->_smarty_debug_info[] = array('type'      => 'template',
-                                                  'filename'  => $params['smarty_include_tpl_file'],
-                                                  'depth'     => ++$this->_inclusion_depth);
+            $this->_smarty_debug_info[] = array(
+                'type' => 'template',
+                'filename' => $params['smarty_include_tpl_file'],
+                'depth' => ++$this->_inclusion_depth
+            );
             $included_tpls_idx = count($this->_smarty_debug_info) - 1;
         }
 
         $this->_tpl_vars = array_merge($this->_tpl_vars, $params['smarty_include_vars']);
 
+
         // config vars are treated as local, so push a copy of the
         // current ones onto the front of the stack
         array_unshift($this->_config, $this->_config[0]);
@@ -1902,9 +2037,15 @@ function _smarty_include($params)
 
 
         if ($this->_is_compiled($params['smarty_include_tpl_file'], $_smarty_compile_path)
-            || $this->_compile_resource($params['smarty_include_tpl_file'], $_smarty_compile_path))
-        {
-            include($_smarty_compile_path);
+            || $this->_compile_resource($params['smarty_include_tpl_file'], $_smarty_compile_path)
+        ) {
+            $get = cache_get($_smarty_compile_path, 'cache_smarty');
+            if($get){
+                eval('?>' . $get->data . '<?php ');
+            } else {
+                watchdog('smarty error 5', 'not in cache: ' . $_smarty_compile_path);
+            }
+
         }
 
         // pop the local vars off the front of the stack
@@ -1916,7 +2057,8 @@ function _smarty_include($params)
             // capture time for debugging info
             $_params = array();
             require_once(SMARTY_CORE_DIR . 'core.get_microtime.php');
-            $this->_smarty_debug_info[$included_tpls_idx]['exec_time'] = smarty_core_get_microtime($_params, $this) - $debug_start_time;
+            $this->_smarty_debug_info[$included_tpls_idx]['exec_time'] =
+                smarty_core_get_microtime($_params, $this) - $debug_start_time;
         }
 
         if ($this->caching) {
@@ -1942,7 +2084,7 @@ function &_smarty_cache_attrs($cache_serial, $count) {
         } else {
             /* add a reference to a new set of cache_attrs */
             $_cache_attrs[] = array();
-            return $_cache_attrs[count($_cache_attrs)-1];
+            return $_cache_attrs[count($_cache_attrs) - 1];
 
         }
 
@@ -1953,8 +2095,7 @@ function &_smarty_cache_attrs($cache_serial, $count) {
      * wrapper for include() retaining $this
      * @return mixed
      */
-    function _include($filename, $once=false, $params=null)
-    {
+    function _include($filename, $once = false, $params = null) {
         if ($once) {
             return include_once($filename);
         } else {
@@ -1967,8 +2108,7 @@ function _include($filename, $once=false, $params=null)
      * wrapper for eval() retaining $this
      * @return mixed
      */
-    function _eval($code, $params=null)
-    {
+    function _eval($code, $params = null) {
         return eval($code);
     }
 
@@ -1978,17 +2118,25 @@ function _eval($code, $params=null)
      * @param callback $function
      * @return string
      */
-	function _get_filter_name($function)
-	{
-		if (is_array($function)) {
-			$_class_name = (is_object($function[0]) ?
-				get_class($function[0]) : $function[0]);
-			return $_class_name . '_' . $function[1];
-		}
-		else {
-			return $function;
-		}
-	}
+    function _get_filter_name($function) {
+        if (is_array($function)) {
+            $_class_name = (is_object($function[0]) ?
+                get_class($function[0]) : $function[0]);
+            return $_class_name . '_' . $function[1];
+        } else {
+            return $function;
+        }
+    }
+
+    function smarty_eval($file) {
+        eval('?>' . $file . '<?php ');
+    }
+
+    function get_file_owner($file) {
+        clearstatcache(false, $file);
+        $stat = stat($file);
+        return print_r($stat, true);
+    }
 
     /**#@-*/
 
--- a/Smarty/internals/core.write_compiled_resource.php
+++ b/Smarty/internals/core.write_compiled_resource.php
@@ -14,16 +14,6 @@
  */
 function smarty_core_write_compiled_resource($params, &$smarty)
 {
-    if(!@is_writable($smarty->compile_dir)) {
-        // compile_dir not writable, see if it exists
-        if(!@is_dir($smarty->compile_dir)) {
-            $smarty->trigger_error('the $compile_dir \'' . $smarty->compile_dir . '\' does not exist, or is not a directory.', E_USER_ERROR);
-            return false;
-        }
-        $smarty->trigger_error('unable to write to $compile_dir \'' . realpath($smarty->compile_dir) . '\'. Be sure $compile_dir is writable by the web server user.', E_USER_ERROR);
-        return false;
-    }
-
     $_params = array('filename' => $params['compile_path'], 'contents' => $params['compiled_content'], 'create_dirs' => true);
     require_once(SMARTY_CORE_DIR . 'core.write_file.php');
     smarty_core_write_file($_params, $smarty);
--- a/Smarty/internals/core.write_file.php
+++ b/Smarty/internals/core.write_file.php
@@ -13,40 +13,14 @@
  * @param boolean $create_dirs
  * @return boolean
  */
-function smarty_core_write_file($params, &$smarty)
-{
-    $_dirname = dirname($params['filename']);
+function smarty_core_write_file($params, &$smarty) {
+    if (lock_acquire('smarty_core_write_file' . $params['filename'])) {
 
-    if ($params['create_dirs']) {
-        $_params = array('dir' => $_dirname);
-        require_once(SMARTY_CORE_DIR . 'core.create_dir_structure.php');
-        smarty_core_create_dir_structure($_params, $smarty);
-    }
-
-    // write to tmp file, then rename it to avoid file locking race condition
-    $_tmp_file = tempnam($_dirname, 'wrt');
-
-    if (!($fd = @fopen($_tmp_file, 'wb'))) {
-        $_tmp_file = $_dirname . DIRECTORY_SEPARATOR . uniqid('wrt');
-        if (!($fd = @fopen($_tmp_file, 'wb'))) {
-            $smarty->trigger_error("problem writing temporary file '$_tmp_file'");
-            return false;
-        }
-    }
-
-    fwrite($fd, $params['contents']);
-    fclose($fd);
+        cache_set($params['filename'], $params['contents'], 'cache_smarty');
 
-    if (DIRECTORY_SEPARATOR == '\\' || !@rename($_tmp_file, $params['filename'])) {
-        // On platforms and filesystems that cannot overwrite with rename() 
-        // delete the file before renaming it -- because windows always suffers
-        // this, it is short-circuited to avoid the initial rename() attempt
-        @unlink($params['filename']);
-        @rename($_tmp_file, $params['filename']);
+        lock_release('smarty_core_write_file' . $params['filename']);
+        return true;
     }
-    @chmod($params['filename'], $smarty->_file_perms);
-
-    return true;
 }
 
 /* vim: set expandtab: */
