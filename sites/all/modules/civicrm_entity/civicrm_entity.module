<?php

/**
 * @file
 * Implement CiviCRM entities as a Drupal Entity.
 */

module_load_include('inc', 'civicrm_entity', 'civicrm_entity.ds');
module_load_include('inc', 'civicrm_entity', 'civicrm_entity.default_form');

/**
 * Implements hook_menu().
 *
 * @return array
 */
function civicrm_entity_menu(){
  $items = array();
  $items['admin/structure/civicrm-entity'] = array(
    'title' => t('CiviCRM Entity'),
    'description' => t('Available CiviCRM Entities'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'user_access',
    'access arguments' => array('administer CiviCRM Entity'),
    'page callback' => 'system_admin_menu_block_page',
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Entity API creates all the fields page links but the basic 'manage' page is missing
 * so we use the /fields page at that url
 */
function civicrm_entity_menu_alter(&$items) {
  foreach (entity_get_info() as $entity_name => $entity_info) {
    if (!empty($entity_info['module']) &&
      $entity_info['module'] == 'civicrm_entity'
    ) {
      foreach ($entity_info['bundles'] as $file_type => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          // Get the base path and access.
          $path = $bundle_info['admin']['path'];
          if(isset($items[$path . '/fields'])) {
            $items[$path] = $items[$path . '/fields'];
            $items[$path]['type'] = MENU_NORMAL_ITEM;
            $items[$path]['title'] = $entity_info['label'];
            $items[$path]['description'] = t('CiviCRM @entity entity', array('@entity' => $entity_name));
            $items[$path . '/fields']['type'] = MENU_DEFAULT_LOCAL_TASK;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function civicrm_entity_permission() {
  return array(
    'civicrm_entity.rules.administer' => array(
      'title' => t('Administer CiviCRM rule configurations'),
      'restrict access' => TRUE,
    ),
    'administer CiviCRM Entity' => array(
      'title' => t('Administer CiviCRM Entity'),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Implements hook_theme()
 *
 * Lets Drupal know to look for templates for the entity types
 *
 * @return themes
 */

function civicrm_entity_theme() {
  $civicrm_entity_info = civicrm_entity_get_supported_entity_info();

  $themes = array();

  foreach ($civicrm_entity_info as $drupal_entity => $data) {
    $dashkey = str_replace('_', '-', $drupal_entity);
    if(isset($data['theme'])) {
      $themes[$drupal_entity] = array(
        'render element' => 'elements',
      );
      if(isset($data['theme']['template'])) {
        $themes[$drupal_entity]['template'] = $data['theme']['template'];
      }
      if(isset($data['theme']['path'])) {
        $themes[$drupal_entity]['path'] = $data['theme']['path'];
      }
    }
  }

  return $themes;
}

/**
 * Entity access callback.
 *
 * @param $op
 * @param $entity
 * @param $account
 * @param $entity_type
 *
 * @return bool
 */
function civicrm_entity_access($op, $entity, $account, $entity_type) {
  // now handles update as a separate op to permission
  return (user_access('administer CiviCRM') || civicrm_entity_op_access($op, $entity_type) );
}


/**
 * Granular per-entity CRUD access control
 * @param $op
 * @param $entity
 *
 * @return TRUE/FALSE
 */
function  civicrm_entity_op_access($op, $entity) {
  $civicrm_entity_info = civicrm_entity_get_supported_entity_info();

  if(isset($civicrm_entity_info[$entity]['permissions'][$op])) {
    $permissions = $civicrm_entity_info[$entity]['permissions'][$op];
    if(is_array($permissions) && count($permissions)) {
      foreach($permissions as $permission){
        if(!user_access($permission)){
          return FALSE;
        }
      }
      return TRUE;
    }
    else return user_access($permissions);
  }
  else return user_access('administer CiviCRM');
}

/**
 * Implements hook_views_data_alter().
 */
/*
function civicrm_entity_views_data_alter($data) { }
*/

/**
 * Implements hook_schema_alter().
 *
 * Note we are just doing this in a very simple form relationship type
 * which is not defined by views at this stage. We have the problem
 * that the CiviCRM views integration uses the _data hook & would need
 * to use _data_alter hook to be compatible with entity views
 * integration
 *
 * @param $schema
 */
function civicrm_entity_schema_alter(&$schema) {
  $schema_entities = _civicrm_entity_enabled_entities();;
  foreach ($schema_entities as $drupal_entity => $civicrm_entity) {
    $schema[$drupal_entity] = civicrm_entity_get_schema($drupal_entity);
  }
}

/**
 * Get schema for entities.
 *
 * This approach may not be required as using the schema_alter hook
 * (as opposed to schema_hook) seems to get around a bunch of the
 * reasons I used a separate schema.
 *
 * @param $table
 *
 * @return array
 */
function civicrm_entity_get_schema($table) {
  if (!civicrm_initialize(TRUE)) {
    return;
  }
  $schema = array();
  $schema[$table] = array(
    'description' => 'The base table for ' . $table,
    'primary key' => array('id'),
    'fields' => array(),
  );
  $civicrm_entity = substr($table, 8);

  $fields = civicrm_api($civicrm_entity, 'getfields', array('version' => 3));
  $fields = $fields['values'];

  foreach ($fields as $fieldname => $field_spec) {
    if (empty($field_spec['name'])) {
      continue;
    }
    $unique_name = empty($field_spec['uniqueName']) ? $fieldname : $field_spec['uniqueName'];
    $schema[$table]['fields'][$unique_name] = array(
        'real_field' => $field_spec['name'],
        'description' => _civicrm_entity_get_title($field_spec),
        'unsigned' => TRUE,
        'not null' => TRUE,
      ) + civicrm_entity_get_field_type($field_spec);
  }
  return empty($schema[$table]) ? array() : $schema[$table];

}

/**
 * Please document this function.
 *
 * @param $field_spec
 *
 * @return array
 */
function civicrm_entity_get_field_type($field_spec) {
  if ($field_spec['name'] == 'id') {
    return array('type' => 'serial');
  }
  if (!isset($field_spec['type'])) {
    return array('type' => 'text', 'field_type' => 'text');
  }

  switch ($field_spec['type']) {
    case CRM_Utils_Type::T_INT:
    case CRM_Utils_Type::T_BOOLEAN:
      return array('type' => 'integer', 'field_type' => 'number_integer');

    case CRM_Utils_Type::T_MONEY:
    case CRM_Utils_Type::T_FLOAT:
      return array('type' => 'float');

    case CRM_Utils_Type::T_TEXT:
    case CRM_Utils_Type::T_STRING:
    case CRM_Utils_Type::T_LONGTEXT:
    case CRM_Utils_Type::T_CCNUM:
    case CRM_Utils_Type::T_EMAIL:
    case CRM_Utils_Type::T_URL:
      return array('type' => 'text','field_type' => 'text');

    case CRM_Utils_Type::T_DATE:
    case CRM_Utils_Type::T_TIME:
    case (CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME):
      return array('type' => 'varchar', 'mysql_type' => 'datetime');

    case CRM_Utils_Type::T_ENUM:
      return array('type' => 'varchar', 'mysql_type' => 'enum');

    case CRM_Utils_Type::T_BLOB:
    case CRM_Utils_Type::T_MEDIUMBLOB:
      return array('type' => 'blob');

    case CRM_Utils_Type::T_TIMESTAMP:
      return array('type' => 'varchar', 'mysql_type' => 'timestamp');

  }
  return array('type' => $field_spec['type']);
}

/**
 * Here we declare selected CiviCRM entities to Drupal.
 *
 * This is necessary for entity module to pick them up.
 */
function civicrm_entity_entity_info() {
  $entities = _civicrm_entity_enabled_entities();

  foreach ($entities as $drupal_entity => $civicrm_entity) {
    $info[$drupal_entity] = array(
      'description' => $civicrm_entity,
      'optional' => TRUE,
      'label' => "CiviCRM " . ucwords(str_replace('_', ' ', $civicrm_entity)),
      'module' => 'civicrm_entity',
      'controller class' => 'CivicrmEntityController',
      'metadata controller class' => 'CivicrmEntityMetadataController',
      'views controller class' => 'CiviCRMEntityDefaultViewsController',
      'ui class' => 'RulesDataUIEntity',
      'fieldable' => TRUE,
      'extra fields controller class' => 'EntityDefaultExtraFieldsController',
      'access callback' => 'civicrm_entity_access',
      'admin ui' => array(
        'path' => $drupal_entity,
        'controller class' => 'CivicrmEntityUIController',
        'file' => 'civicrm_entity_controller.inc',
      ),
      'bundles' => array(
        $drupal_entity => array(
          'label' => t('CiviCRM @entity', array('@entity' => ucwords($civicrm_entity))),
          'admin' => array(
            'path' => 'admin/structure/civicrm-entity/' . $drupal_entity,
            'access arguments' => array('administer CiviCRM'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => TRUE,
        ),
      ),
      'entity keys' => array(
        'id' => 'id',
        'label' => _civicrm_entity_labels($drupal_entity),
      ),
      'base table' => $drupal_entity,
    );
    $label_callback = 'civicrm_entity_' . $drupal_entity . '_label_callback';
    if (function_exists($label_callback)) {
      $info[$drupal_entity]['label callback'] = $label_callback;
    }
  }

  return $info;
}

/**
 * Get supported CiviCRM entity information
 *
 * implement hook_civicrm_entity_supported_info() to get you custom CiviCRM API entity supported
 *
 * @param null $entity_type
 * @return array|void
 */
function civicrm_entity_get_supported_entity_info($entity_type = NULL){
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['civicrm_entity_supported_info'] = &drupal_static(__FUNCTION__);
  }
  $civicrm_entity_info = &$drupal_static_fast['civicrm_entity_supported_info'];

  if (empty($civicrm_entity_info)) {
    if ($cache = cache_get("civicrm_entity_supported_info")) {
      $civicrm_entity_info = $cache->data;
    }
    else {
      $civicrm_entity_info = civicrm_entity_supported_entities_info();

      if (civicrm_initialize()) {
        $codeVersion = explode('.', CRM_Utils_System::version());
        // if db.ver < code.ver, time to upgrade
        if (version_compare($codeVersion[0] . '.' . $codeVersion[1], 4.5) >= 0) {
          CRM_Utils_Hook::singleton()->invoke(1, $civicrm_entity_info,
            CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject,
            CRM_Core_DAO::$_nullObject,
            'civicrm_entity_supported_info'
          );
        } else {
          CRM_Utils_Hook::singleton()->invoke(1, $civicrm_entity_info,
            CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject,
            'civicrm_entity_supported_info'
          );
        }
      }

      cache_set("civicrm_entity_supported_info", $civicrm_entity_info);
    }
  }

  if (empty($entity_type)) {
    return $civicrm_entity_info;
  }
  elseif (isset($civicrm_entity_info[$entity_type])) {
    return $civicrm_entity_info[$entity_type];
  }
}

/**
 * Whitelist of total CiviCRM Entity related info metadata
 *
 * @return array
 */
function civicrm_entity_supported_entities_info(){
  $civicrm_entity_info = array();
  $civicrm_entity_info['civicrm_activity'] = array(
    'civicrm entity name' => 'activity',
    'label property' => 'subject',
    'permissions' => array(
      'view' => array('view all activities'),
      'edit' => array(),
      'update' => array(),
      'create' => array(),
      'delete' => array('delete activities'),
    ),
    'theme' => array(
      'template' => 'civicrm-activity',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'source_contact_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'assignee_contact_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'target_contact_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'relationship_id',
          'target' => 'civicrm_relationship',
        ),
        array(
          'link_field' => 'parent_id',
          'target' => 'civicrm_activity',
        ),
        array(
          'link_field' => 'original_id',
          'target' => 'civicrm_activity',
        ),
      ),
      'option fields' => array('activity_type_id', 'status_id', 'medium_id', 'priority_id',),
      'boolean fields' => array('is_auto', 'is_current_revision', 'is_test', 'is_deleted',),
    ),
  );
  $civicrm_entity_info['civicrm_action_schedule'] = array(
    'civicrm entity name' => 'action_schedule',
    'label property' => 'name',
    'permissions' => array(
        'view' => array(),
        'edit' => array(),
        'update' => array(),
        'create' => array(),
        'delete' => array(),
    ),
  );
  $civicrm_entity_info['civicrm_address'] = array(
    'civicrm entity name' => 'address',
    'label property' => 'address_name',
    'permissions' => array(
      'view' => array('view all contacts'),
      'edit' => array('edit all contacts'),
      'update' => array('edit all contacts'),
      'create' => array('edit all contacts'),
      'delete' => array('delete contacts'),
    ),
    'theme' => array(
      'template' => 'civicrm-address',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'contact_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'contact_id_contact',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'master_id',
          'target' => 'civicrm_contact',
        ),
      ),
      'option fields' => array('location_type_id', 'county_id', 'state_province_id', 'country_id',),
      'boolean fields' => array('is_primary', 'is_billing',),
    ),
  );
  $civicrm_entity_info['civicrm_campaign'] = array(
    'civicrm entity name' => 'campaign',
    'label property' => 'title',
    'permissions' => array(
      'view' => array(),
      'edit' => array(),
      'update' => array(),
      'create' => array(),
      'delete' => array(),
    ),
    'theme' => array(
      'template' => 'civicrm-campaign',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
  );
  $civicrm_entity_info['civicrm_case'] = array(
    'civicrm entity name' => 'case',
    'label property' => 'subject',
    'permissions' => array(
      'view' => array('access all cases and activities'),
      'edit' => array('access all cases and activities'),
      'update' => array('access all cases and activities'),
      'create' => array('add cases', 'access all cases and activities'),
      'delete' => array('delete in CiviCase', 'access all cases and activities'),
    ),
    'theme' => array(
      'template' => 'civicrm-case',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'option fields' => array('case_type_id', 'status_id',),
      'boolean fields' => array('is_deleted',),
    ),
  );
  $civicrm_entity_info['civicrm_contact'] = array(
    'civicrm entity name' => 'contact',
    'label property' => 'display_name',
    'permissions' => array(
      'view' => array('view all contacts'),
      'edit' => array('edit all contacts'),
      'update' => array('edit all contacts'),
      'create' => array('edit all contacts'),
      'delete' => array('delete contacts'),
    ),
    'theme' => array(
      'template' => 'civicrm-contact',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'employer_id_contact',
          'target' => 'civicrm_contact',
        ),
      ),
      'option fields' => array('preferred_communication_method', 'prefix_id', 'suffix_id', 'communication_style_id', 'gender_id',),
      'boolean fields' => array('is_deceased', 'do_not_email', 'do_not_phone', 'do_not_sms', 'do_not_trade', 'do_not_mail', 'is_opt_out', 'is_deleted', 'contact_is_deleted',),
    ),
  );
  $civicrm_entity_info['civicrm_contribution'] = array(
    'civicrm entity name' => 'contribution',
    'label property' => 'contribution_source',
    'permissions' => array(
      'view' => array('access CiviContribute', 'administer CiviCRM'),
      'edit' => array('edit contributions', 'administer CiviCRM'),
      'update' => array('edit contributions', 'administer CiviCRM'),
      'create' => array('edit contributions', 'administer CiviCRM'),
      'delete' => array('edit contributions', 'delete in CiviContribute', 'administer CiviCRM'),
    ),
    'theme' => array(
       'template' => 'civicrm-contribution',
       'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'contact_id_contact',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'contact_id',
          'target' => 'civicrm_contact',
        ),
      ),
      'option fields' => array('financial_type_id', 'contribution_status_id',),
      'boolean fields' => array('is_test', 'is_pay_later', ),
    ),
  );
  $civicrm_entity_info['civicrm_contribution_page'] = array(
    'civicrm entity name' => 'contribution_page',
    'label property' => 'title',
    'permissions' => array(
      'view' => array('make online contributions'),
      'edit' => array('access CiviContribute', 'administer CiviCRM'),
      'update' => array('access CiviContribute', 'administer CiviCRM'),
      'create' => array('access CiviContribute', 'administer CiviCRM'),
      'delete' => array('access CiviContribute', 'administer CiviCRM'),
    ),
    'theme' => array(
      'template' => 'civicrm-contribution-page',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'created_id_contact',
          'target' => 'civicrm_contact',
        ),
      ),
      'option fields' => array('financial_type_id', 'currency',),
      'boolean fields' => array('is_credit_card_only', 'is_monetary', 'is_recur', 'is_confirm_enabled', 'is_recur_interval',
        'is_recur_installments', 'is_pay_later', 'is_partial_payment', 'is_allow_other_amount', 'is_for_organization',
        'is_email_receipt', 'is_active', 'is_share', 'is_billing_required',),
    ),
  );
  $civicrm_entity_info['civicrm_country'] = array(
    'civicrm entity name' => 'country',
    'label property' => 'name',
    'permissions' => array(
      'view' => array('view all contacts'),
      'edit' => array(),
      'update' => array(),
      'create' => array(),
      'delete' => array(),
    ),
    'theme' => array(
      'template' => 'civicrm-country',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'boolean fields' => array('is_province_abbreviated', ),
    ),
  );
  $civicrm_entity_info['civicrm_email'] = array(
    'civicrm entity name' => 'email',
    'label property' => 'email',
    'permissions' => array(
      'view' => array('view all contacts'),
      'edit' => array('edit all contacts'),
      'update' => array('edit all contacts'),
      'create' => array('edit all contacts'),
      'delete' => array('delete contacts'),
    ),
    'theme' => array(
      'template' => 'civicrm-email',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'contact_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'contact_id_contact',
          'target' => 'civicrm_contact',
        ),
      ),
      'option fields' => array('location_type_id',),
      'boolean fields' => array('is_primary', 'is_billing', 'on_hold', 'is_bulkmail', ),
    ),
  );
  $civicrm_entity_info['civicrm_entity_tag'] = array(
    'civicrm entity name' => 'entity_tag',
    'label property' => 'tag_id',
    'permissions' => array(
      'view' => array(),
      'edit' => array(),
      'update' => array(),
      'create' => array(),
      'delete' => array(),
    ),
    'theme' => array(
      'template' => 'civicrm-entity-tag',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'tag_id',
          'target' => 'civicrm_tag',
        ),
      ),
    ),
  );

  //dirty check for whether financialType exists
  if (!method_exists('CRM_Contribute_PseudoConstant', 'contributionType')) {
    $civicrm_entity_info['civicrm_financial_type'] = array(
      'civicrm entity name' => 'financial_type',
      'label property' => 'description',
      'permissions' => array(
        'view' => array('access CiviContribute', 'administer CiviCRM'),
        'edit' => array('access CiviContribute', 'administer CiviCRM'),
        'update' => array('access CiviContribute', 'administer CiviCRM'),
        'create' => array('access CiviContribute', 'administer CiviCRM'),
        'delete' => array('delete in CiviContribute', 'administer CiviCRM'),
      ),
      'theme' => array(
        'template' => 'civicrm-financial-type',
        'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
      ),
      'display suite' => array(
        'boolean fields' => array('is_reserved', 'is_active', 'is_deductible', ),
      ),
    );
  }

  $civicrm_entity_info['civicrm_event'] = array(
    'civicrm entity name' => 'event',
    'label property' => 'title',
    'permissions' => array(
      'view' => array('view event info'),
      'edit' => array('edit all events'),
      'update' => array('edit all events'),
      'create' => array('edit all events'),
      'delete' => array('edit all events', 'delete in CiviEvent'),
    ),
    'theme' => array(
      'template' => 'civicrm-event',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'created_id_contact',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'created_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'parent_event_id',
          'target' => 'civicrm_event',
        ),
      ),
      'option fields' => array('event_type_id', 'financial_type_id', 'default_role_id',),
      'boolean fields' => array('is_public', 'is_pay_later', 'is_online_registration', 'is_monetary', 'is_map', 'is_active',
        'is_show_location', 'is_partial_payment', 'is_multiple_registrations', 'allow_same_participant_emails', 'has_waitlist',
        'requires_approval', 'is_template', 'is_share', 'is_confirm_enabled',),
    ),
  );
  $civicrm_entity_info['civicrm_group'] = array(
    'civicrm entity name' => 'group',
    'label property' => 'name',
    'permissions' => array(
      'view' => array('edit groups'),
      'edit' => array('edit groups'),
      'update' => array('edit groups'),
      'create' => array('edit groups'),
      'delete' => array('edit groups', 'administer CiviCRM'),
    ),
    'theme' => array(
      'template' => 'civicrm-group',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'created_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'created_id_contact',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'modified_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'modified_id_contact',
          'target' => 'civicrm_contact',
        ),
      ),
      'boolean fields' => array('is_active', 'is_hidden', 'is_reserved',),
    ),
  );
  $civicrm_entity_info['civicrm_grant'] = array(
    'civicrm entity name' => 'grant',
    'label property' => '',
    'permissions' => array(
      'view' => array('access CiviGrant', 'administer CiviCRM'),
      'edit' => array('access CiviGrant', 'edit grants'),
      'update' => array('access CiviGrant', 'edit grants'),
      'create' => array('access CiviGrant', 'edit grants'),
      'delete' => array('access CiviGrant', 'edit grants'),
    ),
    'theme' => array(
      'template' => 'civicrm-grant',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'contact_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'contact_id_contact',
          'target' => 'civicrm_contact',
        ),
      ),
      'option fields' => array('status_id', 'financial_type_id', 'grant_type_id',),
      'boolean fields' => array('grant_report_received',),
    ),
  );
  $civicrm_entity_info['civicrm_membership'] = array(
    'civicrm entity name' => 'membership',
    'permissions' => array(
      'view' => array('access CiviMember'),
      'edit' => array('edit memberships', 'access CiviMember'),
      'update' => array('edit memberships', 'access CiviMember'),
      'create' => array('edit memberships', 'access CiviMember'),
      'delete' => array('delete in CiviMember', 'access CiviMember'),
    ),
    'theme' => array(
      'template' => 'civicrm-membership',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'contact_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'contact_id_contact',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'owner_membership_id',
          'target' => 'civicrm_membership',
        ),
      ),
      'option fields' => array('membership_type_id', 'status_id',),
      'boolean fields' => array('is_test', 'is_pay_later', 'is_override',),
    ),
  );
  $civicrm_entity_info['civicrm_membership_type'] = array(
    'civicrm entity name' => 'membership_type',
    'label property' => 'name',
    'permissions' => array(
      'view' => array('access CiviMember'),
      'edit' => array('access CiviMember', 'administer CiviCRM'),
      'update' => array('access CiviMember', 'administer CiviCRM'),
      'create' => array('access CiviMember', 'administer CiviCRM'),
      'delete' => array('delete in CiviMember', 'access CiviMember', 'administer CiviCRM'),
    ),
    'theme' => array(
      'template' => 'civicrm-membership-type',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'member_of_contact_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'member_of_contact_id_contact',
          'target' => 'civicrm_contact',
        ),
      ),
      'option fields' => array('financial_type_id',),
      'boolean fields' => array('is_active', 'auto_renew',),
    ),
  );
  $civicrm_entity_info['civicrm_note'] = array(
    'civicrm entity name' => 'note',
    'label property' => 'subject',
    'permissions' => array(
      'view' => array(),
      'edit' => array(),
      'update' => array(),
      'create' => array(),
      'delete' => array(),
    ),
    'theme' => array(
      'template' => 'civicrm-note',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'contact_id',
          'target' => 'civicrm_contact',
        ),
      ),
    ),
  );
  $civicrm_entity_info['civicrm_participant'] = array(
    'civicrm entity name' => 'participant',
    'label property' => 'source',
    'permissions' => array(
      'view' => array('view event participants'),
      'edit' => array('edit event participants', 'access CiviEvent'),
      'update' => array('edit event participants', 'access CiviEvent'),
      'create' => array('edit event participants', 'access CiviEvent'),
      'delete' => array('edit event participants', 'access CiviEvent'),
    ),
    'theme' => array(
      'template' => 'civicrm-participant',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'contact_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'contact_id_contact',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'event_id',
          'target' => 'civicrm_event',
        ),
        array(
          'link_field' => 'event_id_event',
          'target' => 'civicrm_event',
        ),
        array(
          'link_field' => 'registered_by_id',
          'target' => 'civicrm_contact',
        ),
      ),
      'option fields' => array('status_id', 'role_id',),
      'boolean fields' => array('is_test', 'is_pay_later', 'must_wait',),
    ),
  );

  $civicrm_entity_info['civicrm_phone'] = array(
    'civicrm entity name' => 'phone',
    'label property' => 'phone',
    'permissions' => array(
      'view' => array('view all contacts'),
      'edit' => array('edit all contacts'),
      'update' => array('edit all contacts'),
      'create' => array('edit all contacts'),
      'delete' => array('delete contacts'),
    ),
    'theme' => array(
      'template' => 'civicrm-phone',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'contact_id',
          'target' => 'civicrm_contact',
        ),
      ),
      'option fields' => array('location_type_id', 'mobile_provider_id', 'phone_type_id'),
      'boolean fields' => array('is_primary', 'is_billing',),
    ),
  );
  $civicrm_entity_info['civicrm_pledge'] = array(
    'civicrm entity name' => 'pledge',
    'permissions' => array(
      'view' => array('access CiviPledge'),
      'edit' => array('edit pledges'),
      'update' => array('edit pledges'),
      'create' => array('edit pledges'),
      'delete' => array('edit pledges', 'administer CiviCRM'),
    ),
    'theme' => array(
      'template' => 'civicrm-pledge',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
  );
  $civicrm_entity_info['civicrm_pledge_payment'] = array(
    'civicrm entity name' => 'pledge_payment',
    'permissions' => array(
      'view' => array(),
      'edit' => array(),
      'update' => array(),
      'create' => array(),
      'delete' => array(),
    ),
    'theme' => array(
      'template' => 'civicrm-pledge-payment',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
  );
  $civicrm_entity_info['civicrm_price_set'] = array(
    'civicrm entity name' => 'price_set',
    'permissions' => array(
      'view' => array(),
      'edit' => array(),
      'update' => array(),
      'create' => array(),
      'delete' => array(),
    ),
    'theme' => array(
      'template' => 'civicrm-price-set',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'boolean fields' => array('is_active', 'is_quick_config', 'is_reserved',),
    ),
  );
  $civicrm_entity_info['civicrm_price_field'] = array(
    'civicrm entity name' => 'price_field',
    'permissions' => array(
      'view' => array(),
      'edit' => array(),
      'update' => array(),
      'create' => array(),
      'delete' => array(),
    ),
    'theme' => array(
      'template' => 'civicrm-price-field',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'price_set_id',
          'target' => 'civicrm_price_set',
        ),
      ),
      'option fields' => array('visibility_id',),
      'boolean fields' => array('is_enter_qty', 'is_display_amounts', 'is_active', 'is_required',),
    ),
  );
  $civicrm_entity_info['civicrm_price_field_value'] = array(
    'civicrm entity name' => 'price_field_value',
    'permissions' => array(
      'view' => array(),
      'edit' => array(),
      'update' => array(),
      'create' => array(),
      'delete' => array(),
    ),
    'theme' => array(
      'template' => 'civicrm-price-field-value',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'price_field_id',
          'target' => 'civicrm_price_field',
        ),
        array(
          'link_field' => 'membership_type_id',
          'target' => 'civicrm_membership_type',
        ),
      ),
      'option fields' => array('financial_type_id',),
      'boolean fields' => array('is_default', 'is_active',),
    ),
  );

  $civicrm_entity_info['civicrm_relationship'] = array(
    'civicrm entity name' => 'relationship',
    'label property' => 'description',
    'permissions' => array(
      'view' => array('view all contacts'),
      'edit' => array('edit all contacts'),
      'update' => array('edit all contacts'),
      'create' => array('edit all contacts'),
      'delete' => array('edit all contacts'),
    ),
    'theme' => array(
      'template' => 'civicrm-relationship',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'contact_id_a',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'contact_id_a_contact',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'contact_id_b',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'contact_id_b_contact',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'relationship_type_id',
          'target' => 'civicrm_relationship_type',
        ),
      ),
      'boolean fields' => array('is_active', 'is_permission_a_b', 'is_permission_b_a',),
    ),
  );
  $civicrm_entity_info['civicrm_relationship_type'] = array(
    'civicrm entity name' => 'relationship_type',
    'label property' => 'description',
    'permissions' => array(
      'view' => array('administer CiviCRM'),
      'edit' => array('administer CiviCRM'),
      'update' => array('administer CiviCRM'),
      'create' => array('administer CiviCRM'),
      'delete' => array('administer CiviCRM'),
    ),
    'theme' => array(
      'template' => 'civicrm-relationship-type',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'option fields' => array('contact_sub_type_a', 'contact_sub_type_b',),
      'boolean fields' => array('is_reserved', 'is_active',),
    ),
  );
  $civicrm_entity_info['civicrm_survey'] = array(
    'civicrm entity name' => 'survey',
    'label property' => 'title',
    'permissions' => array(
      'view' => array('administer CiviCampaign'),
      'edit' => array('administer CiviCampaign'),
      'update' => array('administer CiviCampaign'),
      'create' => array('administer CiviCampaign'),
      'delete' => array('administer CiviCampaign'),
    ),
    'theme' => array(
      'template' => 'civicrm-survey',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'campaign_id',
          'target' => 'civicrm_campaign',
        ),
        array(
          'link_field' => 'created_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'last_modified_id',
          'target' => 'civicrm_contact',
        ),
      ),
      'option fields' => array('activity_type_id',),
      'boolean fields' => array('is_active', 'is_default', 'bypass_confirm', 'is_share'),
    ),
  );
  $civicrm_entity_info['civicrm_tag'] = array(
    'civicrm entity name' => 'tag',
    'label property' => 'name',
    'permissions' => array(
      'view' => array('administer Tagsets'),
      'edit' => array('administer Tagsets'),
      'update' => array('administer Tagsets'),
      'create' => array('administer Tagsets'),
      'delete' => array('administer Tagsets'),
    ),
    'theme' => array(
      'template' => 'civicrm-tag',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'created_id',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'created_id_contact',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'parent_id',
          'target' => 'civicrm_tag',
        ),
      ),
      'boolean fields' => array('is_reserved', 'is_tagset', 'is_selectable',),
    ),
  );
  $civicrm_entity_info['civicrm_custom_field'] = array(
    'civicrm entity name' => 'custom_field',
    'label property' => 'label',
    'permissions' => array(
      'view' => array(),
      'edit' => array(),
      'update' => array(),
      'create' => array(),
      'delete' => array(),
    ),
    'theme' => array(
      'template' => 'civicrm-custom-field',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'custom_group_id',
          'target' => 'civicrm_custom_group',
        ),
      ),
      'boolean fields' => array('is_view', 'is_active', 'is_required', 'is_searchable', 'is_search_range',),
    ),
  );
  $civicrm_entity_info['civicrm_custom_group'] = array(
    'civicrm entity name' => 'custom_group',
    'label property' => 'title',
    'permissions' => array(
      'view' => array(),
      'edit' => array(),
      'update' => array(),
      'create' => array(),
      'delete' => array(),
    ),
    'theme' => array(
      'template' => 'civicrm-custom-group',
      'path' => drupal_get_path('module', 'civicrm_entity') . '/templates'
    ),
    'display suite' => array(
      'link fields' => array(
        array(
          'link_field' => 'created_id_contact',
          'target' => 'civicrm_contact',
        ),
        array(
          'link_field' => 'membership_type_id',
          'target' => 'civicrm_membership_type',
        ),
      ),
      'boolean fields' => array('is_multiple', 'is_active', 'collapse_display', 'collapse_adv_display', 'is_reserved',),
    ),
  );
  return $civicrm_entity_info;
}

/**
 * Whitelist of enabled entities. We don't have a compelling reason for not including all entities
 * but some entities are fairly non-standard and of course the rule hook would instantiate rules
 * more often if all were enabled.
 *
 * The whitelist approach is mostly out of caution
 *
 * @return array of enabled entities keyed by the drupal entity name
 */
function _civicrm_entity_enabled_entities() {
  $civicrm_entity_info = civicrm_entity_get_supported_entity_info();
  $whitelist = array();
  foreach($civicrm_entity_info as $drupal_entity => $data){
    if(isset($data['civicrm entity name'])) {
      $whitelist[$drupal_entity] = $data['civicrm entity name'];
    }
  }

  _civicrm_enabled_entity_alter_whitelist($whitelist);
  return $whitelist;
}

/**
 * Allow extensions to alter entities
 * @param array $whitelist
 *
 * @return mixed
 */
function _civicrm_enabled_entity_alter_whitelist(&$whitelist) {
  if (!civicrm_initialize()) {
    return;
  }
  $codeVersion = explode('.', CRM_Utils_System::version());
  // if db.ver < code.ver, time to upgrade
  if (version_compare($codeVersion[0] . '.' . $codeVersion[1], 4.5) >= 0) {
    return CRM_Utils_Hook::singleton()->invoke(1, $whitelist,
      CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject,
      CRM_Core_DAO::$_nullObject,
      'civicrm_alter_drupal_entities'
    );
  }
  else {
    return CRM_Utils_Hook::singleton()->invoke(1, $whitelist,
      CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject,
      'civicrm_alter_drupal_entities'
    );
  }
}

/**
 * Provide label (column) for each entity types - default to id if nothing specified.
 *
 * @TODO Use the CiviCRM 4.5 getlist function - possibly ported into this module to support 4.4
 *
 * @see http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_info/7
 *
 * @param $entity
 * @return string
 */
function _civicrm_entity_labels($entity) {
  $civicrm_entity_info = civicrm_entity_get_supported_entity_info();
  $labels = array();
  foreach($civicrm_entity_info as $drupal_entity => $data){
    if(isset($data['label property']) && $data['label property'] != '') {
      $labels[$drupal_entity] = $data['label property'];
    }
  }

  _civicrm_enabled_entity_alter_labels($labels);
  return isset($labels[$entity]) ? $labels[$entity] : 'id';
}

/**
 * @param array $labels
 *
 * @return mixed
 */
function _civicrm_enabled_entity_alter_labels(&$labels) {
  if (!civicrm_initialize()) {
    return;
  }
  $codeVersion = explode('.', CRM_Utils_System::version());
  // if db.ver < code.ver, time to upgrade
  if (version_compare($codeVersion[0] . '.' . $codeVersion[1], 4.5) >= 0) {
    return CRM_Utils_Hook::singleton()->invoke(1, $labels,
      CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject,
      CRM_Core_DAO::$_nullObject,
      'civicrm_alter_drupal_entity_labels'
    );
  }
  else {
    return CRM_Utils_Hook::singleton()->invoke(1, $labels,
      CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject, CRM_Core_DAO::$_nullObject,
      'civicrm_alter_drupal_entity_labels'
    );
  }
}

/**
 * Here we declare Selected CiviCRM entities fields to Drupal.
 *
 * Some trickiness here as declaring the 'schema' via our special civi
 * schema function seems to cause fields to be declared twice if we us
 * property_info rather than property_info_alter.
 *
 * At the moment civicrm_relationship_type is the only entity being
 * managed through 'our' schema.
 *
 * @param $info
 *
 * @return
 */
function civicrm_entity_entity_property_info_alter(&$info) {
  if (!civicrm_initialize(TRUE)) {
    return;
  }

  // We'll start with a few basic entities but we could get them the
  // same way the API explorer does.
  $entities = _civicrm_entity_enabled_entities();
  foreach ($entities as $drupal_entity => $civicrm_entity) {
    $info[$drupal_entity]['properties'] = _civicrm_entity_getproperties($civicrm_entity, 'property_info');
    // $info[$drupal_entity]['bundles'] = array();
  }
  // This makes the drupal user available when chaining from a rule.
  $info['civicrm_contact']['properties']['civicrm_user'] = array(
    'label' => 'Drupal User',
    'description' => 'Drupal User for contact',
    'type' => 'user',
    'translateable' => FALSE,
    'getter callback' => 'civicrm_entity_contact_user_get',
    'setter callback' => 'civicrm_entity_contact_user_set',
  );

  // Attach a CiviCRM Contact property to drupal users.
  $info['user']['properties']['civicrm_contact'] = array(
    'label' => 'CiviCRM Contact',
    'description' => 'CiviCRM Contact for user',
    'type' => 'civicrm_contact',
    'field' => FALSE,
    'translatable' => FALSE,
    'getter callback' => 'civicrm_entity_user_contact_get',
  );

  return $info;
}

/**
 *  Implements hook_field_extra_fields_alter()
 *
 *  put civicrm properties on the manage fields form for weight based ordering of edit form elements
 *
 * @param $info
 */
function civicrm_entity_field_extra_fields_alter(&$info) {
  if (!civicrm_initialize(TRUE)) {
    return;
  }
  $entities = _civicrm_entity_enabled_entities();
  foreach ($entities as $drupal_entity => $civicrm_entity) {
    $properties[$drupal_entity]['properties'] = _civicrm_entity_getproperties($civicrm_entity, 'property_info');

    foreach($info[$drupal_entity][$drupal_entity]['display'] as $name => $props) {
      $info[$drupal_entity][$drupal_entity]['form'][$name] = $props;
    }
  }

}

/**
 * Calculate fields for entities
 *
 * @param $civicrm_entity
 * @param string $context
 *
 * @return array
 */
function _civicrm_entity_getproperties($civicrm_entity, $context = '') {
  $info = array();
  if ($civicrm_entity == 'contact') {
    $info['civi_user'] = array(
      'label' => 'Drupal User',
      'type' => 'user',
      'field' => FALSE,
      'translateable' => FALSE,
      'getter callback' => 'civicrm_entity_contact_user_get',
      'setter callback' => 'civicrm_entity_contact_user_set',
    );
  }
  $fields = civicrm_api($civicrm_entity, 'getfields', array(
    'version' => 3,
    'action' => 'create',
  ));
  foreach ($fields['values'] as $fieldname => $field_specs) {
    // Type is empty for custom fields - we should sort that out but
    // skipping for now we are only doing 'integers' at this stage.
    $types = array(
      1 => 'integer',
      2 => 'text',
      32 => 'text',
      16 => 'integer',
      4 => 'datetime',
      8 => 'datetime',
      12 => 'datetime',
      256 => 'datetime',
      512 => 'decimal',
      1024 => 'decimal',
    );
    if (!empty($field_specs['type']) &&
      array_key_exists($field_specs['type'], $types)
    ) {
      //determine the label of the field
      $label = _civicrm_entity_get_title($field_specs);
      $info[$fieldname] = array(
        'label' => $label,
        'type' => $types[$field_specs['type']],
        'sanitize' => 'check_plain',
        'setter callback' => 'entity_property_verbatim_set',
      );
      if (!empty($field_specs['api.required'])) {
        $info[$fieldname]['required'] = TRUE;
      }
      if ($field_specs['type'] == 16) {
        $info[$fieldname]['size'] = 'tiny';
      }
      if ($types[$field_specs['type']] == 'datetime') {
        unset($info[$fieldname]['type']);
        $info[$fieldname]['mysql_type'] = 'datetime';
        $info[$fieldname]['tz_handling'] = 'site';
        $info[$fieldname]['offset_field'] = '';
        $info[$fieldname]['related_fields'] = array();
        switch ($field_specs['type']) {
          case 4:
            $info[$fieldname]['granularity'] = array('year', 'month', 'day');
            break;
          case 8:
            $info[$fieldname]['granularity'] = array(
              'hour',
              'minute',
              'second'
            );
          case 12:
            $info[$fieldname]['granularity'] = array(
              'year',
              'month',
              'day',
              'hour',
              'minute',
              'second'
            );
        }
      }
      // This is a semi-reliable way of distinguishing 'real' fields
      // from pseudo fields and custom fields and impacts on views
      if (!empty($field_specs['name'])) {
        $info[$fieldname]['schema field'] = $field_specs['name'];
      }

      //widget code
      $info[$fieldname]['widget'] = civicrm_entity_get_field_widget($field_specs,$civicrm_entity);

      // We will add contact as a related entity for FK references to
      // contact. This could be expanded to all FKs e.g event_id in
      // Participant. Could load the event at the moment we are being
      // cautious.
      if (CRM_Utils_Array::value('FKClassName', $field_specs)) {
        $fks = _civicrm_entity_chained_fks();
        if (array_key_exists($field_specs['FKClassName'], $fks)) {
          $fks_entity = $fks[$field_specs['FKClassName']];
          $info[$fieldname . '_' . $fks_entity] = array(
            'label' => _civicrm_entity_get_title($field_specs),
            'type' => 'civicrm_' . $fks_entity,
            'property_info' => array(
              'field' => $fieldname,
              'entity' => $fks_entity,
            ),
            'getter callback' => 'civicrm_entity_metadata_civicrm_entity_get_properties',
          );
        }
      }
      // @TODO We are treating contact as the only possible entity
      // which is not great - need to figure out better approach - can
      // we have more than one? Define 'civicrm_entity'?
      if ($fieldname == 'entity_id') {
        $fks_entity = 'contact';
        $info[$fieldname . '_' . $fks_entity] = array(
          'label' => _civicrm_entity_get_title($field_specs),
          'type' => 'civicrm_' . $fks_entity,
          'property_info' => array(
            'field' => $fieldname,
            'entity' => $fks_entity,
          ),
          'getter callback' => 'civicrm_entity_metadata_civicrm_entity_get_properties',
        );
      }

      if (!empty($field_specs['options'])) {
        // $info[$fieldname]['type'] = 'list<integer>';
        $info[$fieldname]['options list'] = '_civicrm_entity_rules_attach_options';
        $info[$fieldname]['options data'] = $field_specs['options'];
        if ($context == 'property_info') {
          $info[$fieldname]['property defaults']['options list'] = $field_specs['options'];
        }
      }

      $info['type'] = array(
        'label' => t('Type'),
        'description' => t('Dummy field for bundle key'),
        'type' => 'token',
        'setter callback' => 'entity_property_verbatim_set',
        'required' => FALSE,
        'property defaults' => array('civicrm_' . strtolower($civicrm_entity)),
      );
    }
  }
  return $info;
}

/**
 * Utility function that takes the provided field specs from a getfields call and builds
 * a widget property array on the property metadata info
 *
 * @param $field_spec
 *
 * @return array
 */
function civicrm_entity_get_field_widget($field_spec, $civicrm_entity) {
  $widget = array();

  if (isset($field_spec['name']) && $field_spec['name'] == 'id') {
    $widget =  array('widget' => 'hidden');
  }

  if(!isset($field_spec['type'])) {
    $widget = array('widget' => 'hidden');
  }

  if(isset($field_spec['html']['type'])) {
    switch ($field_spec['html']['type']) {
      case 'Text':
        $widget = array('widget' => 'textfield');
        break;
      case 'Select':
        $widget = array('widget' => 'select');
        $widget['options'] = civicrm_entity_get_field_options($field_spec['name'], $civicrm_entity);
        break;
      case 'Autocomplete-Select':
        $widget = array('widget' => 'textfield');
        break;
      case 'CheckBox':
        $widget = array('widget' => 'checkbox');
        break;
      case 'RichTextEditor':
      case 'TextArea':
        $widget = array('widget' => 'textarea');
        break;

      default: break;
    }
  }
  else {
    $widget = array('widget' =>'textfield');
  }

  if(isset($field_spec['type'])) {

    switch($field_spec['type']) {
      case 4:
        $widget = array('widget' => 'date_select','format' => 'Y:m:d');
        break;
      case 8:
        $widget = array('widget' => 'date_select','format' => 'H:i:s');
        break;
      case 12:
        $widget = array('widget' => 'date_select','format' => 'Y:m:d H:i:s');
        break;
    }
  }

  return $widget;
}

/**
 * Utility function to get the options for a civicrm options field for the widget metadata
 *
 * @param $field_name
 * @param $civicrm_entity
 * @return array
 */
function civicrm_entity_get_field_options($field_name, $civicrm_entity){
  $result = civicrm_api($civicrm_entity, 'getoptions', array('sequential'=>1,'version' => 3, 'field' => $field_name));
  $options = array(NULL => '- No Value -');
  if(!$result['is_error']) {
    foreach($result['values'] as $option) {
      $options[$option['key']] = $option['value'];
    }
    return $options;
  }
  else return array();
}

/**
 * Please document this function.
 */
function _civicrm_entity_chained_fks() {
  return array(
    'CRM_Contact_DAO_Contact' => 'contact',
    'CRM_Event_DAO_Event' => 'event',
  );
}



/**
 * Title callback
 *
 * @param $field_specs
 * @param string $entity_type
 * @return string
 */
function _civicrm_entity_get_title($field_specs, $entity_type = '') {
  if (!empty($entity_type)) {
    $label_field = _civicrm_entity_labels($entity_type);
  }
  else {
    $label_field = 'title';
  }
  if (empty($field_specs[$label_field])) {
    if (array_key_exists('label', $field_specs)) {
      $label_field = 'label';
    }
    else if (array_key_exists('name', $field_specs)) {
      $label_field = 'name';
    }
  }

  $label = $field_specs[$label_field];

  if (!empty($field_specs['groupTitle'])) {
    $label = $field_specs['groupTitle'] . ': ' . $label;
  }

  return empty($label) ? 'Title not defined in schema' : $label;
}

/**
 * Label callback for civicrm_contact entity type.
 *
 *   drupal_alter('civicrm_entity_' . $entity, $, $alterable2, $context);
 *
 * @param $entity
 * @param $entity_type
 *
 * @return null|string
 */
function civicrm_entity_civicrm_contact_label_callback($entity, $entity_type) {
  $label = isset($entity->display_name) ? $entity->display_name : '';
  // drupal_alter('civicrm_entity_contact_label', $label, $entity);
  if (isset($entity->email) && !empty($entity->email)) {
    $label = t('!label <!email>', array(
        '!label' => $label,
        '!email' => $entity->email
      ));
  }
  elseif (isset($entity->phone) && !empty($entity->phone)) {
    $label = t('!label <!phone>', array(
        '!label' => $label,
        '!phone' => $entity->phone
      ));
  }
  return $label;
}

/**
 * Implement getter callback.
 *
 * NB this is in a separate file called callbacks.inc in entity module
 * - I couldn't see how it was loaded so maybe the name has some
 * magic?
 *
 * MH - Skvare -- This function should not use the CiviCRM api, but instead the Drupal Entity API to load and return the entity object
 *
 * @param $data
 * @param $options
 * @param $name
 * @param $type
 * @param $info
 *
 * @return object
 */
function civicrm_entity_metadata_civicrm_entity_get_properties($data, $options, $name, $type, $info) {
  if(isset($info['property_info']['entity']) && isset($data->$info['property_info']['field'])) {
    $entity = civicrm_api($info['property_info']['entity'], 'get', array(
        'version' => 3,
        'id' => $data->$info['property_info']['field'],
        'sequential' => 1,
    ));
    return (object)$entity['values'][0];
  }
}

/**
 * Condition Drupal User Account exists for contact.
 *
 * @param array $contact
 *   Contact array.
 *
 * @return object
 *   Drupal user object if success, FALSE on fail.
 */
function civicrm_entity_user_exists($contact) {
  return civicrm_entity_action_load_user($contact);
}

/**
 * Condition Drupal User Account can be created for contact (creates contact).
 *
 * @param array $contact
 *   contact array
 *
 * @return object
 *   Drupal user object if success, FALSE on Fail
 */
function civicrm_entity_user_creatable($contact) {
  return civicrm_entity_action_create_user($contact, TRUE);
}

/**
 * Condition Drupal User Account can be created or exists for contact.
 *
 * Creates contact if appropriate.
 *
 * @param array $contact
 *   contact array
 *
 * @return mixed
 *   Drupal user object if success, FALSE on fail.
 */
function civicrm_entity_user_exists_or_creatable($contact) {
  return civicrm_entity_action_load_create_user($contact);
}

/**
 * Given a contact object return the Drupal user.
 *
 * @param StdClass $entity
 *   Contact Std Object
 *
 * @return object
 *   Drupal user object.
 */
function civicrm_entity_action_load_user($entity) {
  $domain_id = civicrm_api('domain', 'getvalue', array(
    'version' => 3,
    'return' => 'id',
    'current_domain' => TRUE,
  ));
  $params = array(
    'version' => 3,
    'contact_id' => $entity->id,
    'return' => 'uf_id',
    'domain_id' => $domain_id,
  );
  $contact = civicrm_api('uf_match', 'getsingle', $params);
  if (empty($contact['is_error'])) {
    return array('civicrm_user' => user_load($contact['uf_id']));
  }
}

/**
 * Given a contact object, load or create then return a drupal user.
 *
 * @param object $contact
 *   CiviCRM Contact Object
 *
 * @param $is_active
 * @param bool $notify
 * @param bool $signin
 *
 * @throws Exception
 * @return object
 *   $user Drupal user object or FALSE.
 */
function civicrm_entity_action_create_user($contact, $is_active, $notify = FALSE, $signin = FALSE) {
  if (!is_array($contact)) {
    // Perhaps we should be accepting object rather than array here?
    $contact = (array) $contact;
  }
  // We'll use the civicrm sync mechanism to see if Civi can match the
  // contact to an existing user.
  //
  // Don't think this is a great approach but will use for now - could
  // just create the user but no great support for that yet.
  if (empty($contact['display_name']) || empty($contact['email'])) {
    $contact = civicrm_api('contact', 'getsingle', array(
      'version' => 3,
      'id' => $contact['id'],
      'sequential' => 1,
      'return' => 'email,display_name',
    ));
  }
  if (!is_string($contact['email']) && isset($contact['email'][0]->email)) {
    $contact['email'] = $contact['email'][0]->email;
  }
  // @TODO What happens if they don't have an email at this point?
  // An email is a pre-requisite for a Drupal account, so the action
  // fails if they don't have an email.
  $contact['display_name'] = trim(preg_replace("/[^A-Za-z0-9 ]/", '', truncate_utf8($contact['display_name'],60)));
  $params = array(
    'name' => $contact['display_name'],
    'mail' => $contact['email'],
    'email' => $contact['email'],
    'init' => $contact['email'],
  );

  // Check if the requested username is available.
  $errors = array();
  $config = CRM_Core_Config::singleton();
  $config->userSystem->checkUserNameEmailExists($params, $errors);
  if (!empty($errors)) {
    foreach ($errors as $error) {
      drupal_set_message(t($error), 'error');
    }
    return FALSE;
  }

  $params['cms_name'] = $params['name'] = $user['name'] = !empty($contact['display_name']) ? $contact['display_name'] : $params['mail'];
  $params['cms_pass'] = $user['pass'] = substr(str_shuffle("abcefghijklmnopqrstuvwxyz"), 0, 8);
  $params['status'] = $is_active;
  if ($notify) {
    $params['notify'] = TRUE;
  }

  $params['roles'] = array(
    DRUPAL_AUTHENTICATED_RID => 'authenticated user',
  );

  // Set $config->inCiviCRM = TRUE to prevent creating a duplicate
  // contact from user_save().
  $config = CRM_Core_Config::singleton();
  $config->inCiviCRM = TRUE;

  $user_object = user_save('', $params);
  $user_object->password = $user['pass'];

  $config->inCiviCRM = FALSE;

  // If selected in action configuration, notify the newly created
  // user & send registration link. Does not contain password in D7.
  if ($notify) {
    drupal_mail('user', 'register_no_approval_required', $params['mail'], NULL, array('account' => $user_object), variable_get('site_mail', 'noreply@example..com'));
  }

  // CiviCRM doesn't do this when created off CiviCRM Form.
  //
  // Note that we 'pretend' to be logging in to make it do a ufmatch
  // on just the email.
  CRM_Core_BAO_UFMatch::synchronizeUFMatch($user_object, $user_object->uid, $contact['email'], 'drupal', NULL, NULL, TRUE);

  // If selected in action configuration, automatically sign in the
  // current user.
  if ($signin) {
    global $user;
    $user = user_load($user_object->uid);
    watchdog('civicrm_entity', 'User %name logged in via CiviCRM Entity rule execution.', array('%name' => $user->name), WATCHDOG_INFO);
    $form_values = array('uid' => $user->uid);
    user_login_finalize($form_values);
  }

  return array('civicrm_user' => $user_object);
}

/**
 * Implements hook_query().
 *
 * @param $type
 * @param $property
 * @param $value
 * @param $limit
 * @return array
 */
function civicrm_entity_query($type, $property, $value, $limit) {
  $return = entity_load($type, FALSE, array(
      $property => $value,
      'options' => array('limit' => $limit)
    ));
  return array('entity_fetched' => array_values($return));
}

/**
 * Info alteration callback for the entity query action.
 * @todo this is copy of rules_action_entity_query_info_alter
 *
 * @param $element_info
 * @param RulesAbstractPlugin $element
 */
function civicrm_entity_query_info_alter(&$element_info, RulesAbstractPlugin $element) {
  $element->settings += array('type' => NULL, 'property' => NULL);
  if ($element->settings['type']) {
    $element_info['parameter']['property']['options list'] = 'rules_action_entity_query_property_options_list';

    if ($element->settings['property']) {
      $wrapper = rules_get_entity_metadata_wrapper_all_properties($element);
      if (isset($wrapper->{$element->settings['property']}) &&
        $property = $wrapper->{$element->settings['property']}
      ) {
        $element_info['parameter']['value']['type'] = $property->type();
        $element_info['parameter']['value']['options list'] = $property->optionsList() ? 'rules_action_entity_query_value_options_list' : FALSE;
      }
    }
  }
  $element_info['provides']['entity_fetched']['type'] =
    'list<' . $element->settings['type'] . '>';
}

/**
 * Load or create user as appropriate.
 *
 * @param $entity
 * @param int $is_active
 * @param int $notify
 *
 * @return object
 */
function civicrm_entity_action_load_create_user($entity, $is_active = 0, $notify = 0) {
  if ($user = civicrm_entity_action_load_user($entity)) {
    if ($is_active && !$user['civicrm_user']->status) {
      $user['civicrm_user']->status = $is_active;
      $user['civicrm_user']->save;
    }
    return $user;
  }
  return civicrm_entity_action_create_user((array) $entity, $is_active, $notify);
}

/**
 * @param $user
 *
 * @param null $email
 *
 * @return mixed
 */
function civicrm_entity_action_load_create_contact($user, $email = NULL) {
  try {
    return civicrm_entity_action_load_contact($user);
  }
  catch (CiviCRM_API3_Exception $e) {
    $ufMatch = CRM_Core_BAO_UFMatch::synchronizeUFMatch($user, $user->uid, ($email ? $email : $user->mail), 'Drupal', FALSE, 'Individual');
    $entities = entity_load('civicrm_contact', array($ufMatch->contact_id));
    return array('civicrm_contact' => reset($entities));
  }

}

/**
 * @param $user
 *
 * @return mixed
 * @throws CiviCRM_API3_Exception
 */
function civicrm_entity_action_load_contact($user) {
  if (!civicrm_initialize()) {
    return;
  }
  $contact_id = civicrm_api3('uf_match', 'getvalue', array(
    'uf_id' => $user->uid,
    'return' => 'contact_id',
    'domain_id' => CRM_Core_Config::domainID()
  ));
  $entities = entity_load('civicrm_contact', array($contact_id));
  return array('civicrm_contact' => reset($entities));
}

/**
 * gt location options
 * @return array
 */
function civicrm_entity_get_locations() {
  if (!civicrm_initialize()) {
    return array();
  }
  $locations = civicrm_api3('address', 'getoptions', array('field' => 'location_type_id'));
  $locations = $locations['values'];
  return array('0' => 'Primary') + $locations;
}

/**
 * @param $contact
 * @param $location_type_id
 *
 * @return array
 */
function civicrm_entity_contact_has_location_element_email(&$contact, $location_type_id) {
  if (!empty($contact->email)) {
    return TRUE;
  }
  $email = civicrm_entity_contact_has_location_element('email', $contact, $location_type_id);
  if (!empty($email['civicrm_email']->email)) {
    $contact->email = $email['civicrm_email']->email;
    return TRUE;
  }
  return FALSE;
}

/**
 * @param $contact
 * @param $location_type_id
 *
 * @return array
 */
function civicrm_entity_contact_get_email($contact, $location_type_id) {
  return civicrm_entity_contact_get_location_element('email', $contact, $location_type_id);
}

/**
 * @param $contact
 * @param $location_type_id
 *
 * @return array|bool
 */
function civicrm_entity_contact_get_location_element($entity, &$contact, $location_type_id) {
  $params = array(
    'contact_id' => $contact->id,
    'sequential' => 1,
    'on_hold' => 0
  );
  if ($location_type_id) {
    $params['location_type_id'] = $location_type_id;
  }
  else {
    $params['is_primary'] = 1;
  }
  $result = civicrm_api3($entity, 'get', $params);
  if (!$result['count']) {
    return array('civicrm_' . $entity => '');
  }
  return array('fetched_' . $entity => $result['values'][0]['email']);
}

/**
 * @param $contact
 * @param $subject
 * @param $message_text
 * @param $message_html
 * @param null $from
 */
function civicrm_entity_contact_send_email($contact, $subject, $message_text, $message_html, $from = NULL) {
  $email = civicrm_api3('email', 'get', array(
      'contact_id' => $contact->id,
      'is_primary' => 1,
      'on_hold' => 0,
      'sequential' => 1
    ));
  if (!$email['count']) {
    watchdog('civicrm_entity_rules', 'no email could be sent to !contact_id', array('!contact_id' => $contact->id));
  }
  $params = array();
  $params['from'] = !empty($from) ? str_replace(array(
    "\r",
    "\n"
  ), '', $from) : 'Admin';
  $params['toEmail'] = $email['values'][0]['email'];
  $params['subject'] = $subject;
  $params['text'] = $message_text;
  $params['html'] = $message_html;
  CRM_Utils_Mail::send($params);
  civicrm_api3('activity', 'create', array(
      'activity_type_id' => 'Email',
      'source_contact_id' => $contact->id,
      'target_contact_id' => $contact->id,
      'subject' => $subject,
      'details' => $message_html
    ));
}

/**
 * Implement the pre hook and delete Drupal field data when civicrm deletes an entity.
 *
 * @param $op
 * @param $object_name
 * @param $id
 * @param $params
 */
function civicrm_entity_civicrm_pre($op, $objectName, $id, &$params) {
  if ($op == 'delete') {
    $entity_type = '';
    $valid_entities = _civicrm_entity_enabled_entities();
    switch($objectName) {
      case 'Individual':
      case 'Household':
      case 'Organization':
        $entity_type = 'civicrm_contact';
        break;
      default:
        $entity_type = 'civicrm_' . _civicrm_entity_get_entity_name_from_camel($objectName);
        break;
    }
    if(isset($valid_entities[$entity_type])) {
      $entity = entity_load_single($entity_type, $id);
      field_attach_delete($entity_type, $entity);
    }

  }
}
/**
 * Implement the post hook and fire the corresponding rules event.
 *
 * @param $op
 * @param $object_name
 * @param $object_id
 * @param $object_ref
 */
function civicrm_entity_civicrm_post($op, $object_name, $object_id, &$object_ref) {
  if (!module_exists('rules')) {
    return;
  }
  $contact_types = array(
    'Individual',
    'Household',
    'Organization',
  );
  if (in_array($object_name, $contact_types)) {
    $object_name = 'Contact';
  }

  $valid_objects = _civicrm_entity_enabled_entities();
  $entity_name = _civicrm_entity_get_entity_name_from_camel($object_name);
  if (!in_array($entity_name, $valid_objects, TRUE)) {
    return;
  }
  $event_name = NULL;
  switch ($op) {

    case 'create':
    case 'edit':
      $event_name = 'civicrm_' . $entity_name . "_{$op}";
      break;

    /*
     *  Here we are checking if the contact entity is being deleted
     *  AND if the contact has sent to the trash already. If the
     *  contact has been sent to the trash, we want to permanently
     *  delete it. If not, we will just fire the "update" event to
     *  let the subscribed rules know that the "is_delete" flag has
     *  changed.
     */
    case 'delete':
      if($entity_name == 'contact') {
        if($object_ref->is_deleted == 1) {
          $event_name = 'civicrm_' . $entity_name . "_{$op}";
        }
        else {
          //we are receiving a reference to the contact object before the flag has changed. So we need to force it to change.
          $object_ref->is_deleted = 1;
          $event_name = 'civicrm_' . $entity_name . "_edit";
        }
      }
      else {
        $event_name = 'civicrm_' . $entity_name . "_{$op}";
      }
      break;

    //We need to alert subscribed rules that the "is_delete" flag has changed.
    case 'restore':
      //we are receiving a reference to the contact object before the flag has changed. So we need to force it to change.
      $object_ref->is_deleted = 0;
      $event_name = 'civicrm_' . $entity_name . "_edit";
      break;

    default:
      break;

  }
  if ($entity_name == 'entity_tag') {
    // Argh entity tag is completely non-standard!!!
    // @see CRM-11933
    foreach ($object_ref[0] as $entity_tag) {
      $object = new CRM_Core_BAO_EntityTag();
      $object->entity_id = $entity_tag;
      $object->entity_table = 'civicrm_contact';
      $object->tag_id = $object_id;
      if ($object->find(TRUE)) {
        // This find is probably not necessary but until more testing
        // on the tag create is done I will.
        rules_invoke_event($event_name, $object);
      }
    }
  }
  else {
    if ($event_name) {
      //this addition here causes a custom field value to be saved every time, duplicates and empty values can be made
      /*if(isset($object_ref->id)){
        $entity = entity_load_single('civicrm_' . $entity_name, $object_ref->id);
      }*/
      rules_invoke_event($event_name, $object_ref);
      //rules_invoke_event($event_name, $entity);
    }
  }
}

/**
 * Convert possibly camel name to underscore separated entity name.
 *
 * @see _civicrm_api_get_entity_name_from_camel()
 *
 * @TODO Why don't we just call the above function directly?
 * Because the function is officially 'likely' to change as it is an internal api function and calling api functions directly is explicitly not supported
 *
 * @param string $entity
 *   Entity name in various formats e.g:
 *     Contribution => contribution,
 *     OptionValue => option_value,
 *     UFJoin => uf_join.
 *
 * @return string
 *   $entity entity name in underscore separated format
 */
function _civicrm_entity_get_entity_name_from_camel($entity) {
  if ($entity == strtolower($entity)) {
    return $entity;
  }
  else {
    $entity = ltrim(strtolower(
      str_replace('U_F', 'uf',
        // That's CamelCase, beside an odd UFCamel that is expected as uf_camel
        preg_replace('/(?=[A-Z])/', '_$0', $entity)
      )), '_');
  }
  return $entity;
}

/**
 * Load contact entity according to user id.
 *
 * @param $data
 * @param array $options
 * @param $name
 * @param $type
 * @param $info
 *
 * @return null
 */
function civicrm_entity_user_contact_get($data, array $options, $name, $type, $info) {
  if (!module_exists('civicrm') || !function_exists('civicrm_initialize')) {
    return;
  }
  if (!civicrm_initialize()) {
    return;
  }

  $domain_id = civicrm_api('domain', 'getvalue', array(
    'version' => 3,
    'return' => 'id',
    'current_domain' => TRUE,
  ));
  $contact = civicrm_api('uf_match', 'getsingle', array(
    'version' => 3,
    'return' => 'contact_id',
    'uf_id' => $data->uid,
    'domain_id' => $domain_id,
  ));

  if (!empty($contact['contact_id'])) {
    $entity = entity_load('civicrm_contact', array($contact['contact_id']));
    return $entity[$contact['contact_id']];
  }
  else {
    return NULL;
  }
}

/**
 * * Load user entity according to contact id.
 *
 * @param $data
 * @param array $options
 * @param $name
 * @param $type
 * @param $info
 */
function civicrm_entity_contact_user_get($data, array $options, $name, $type, $info) {
  if (!module_exists('civicrm') || !function_exists('civicrm_initialize')) {
    return;
  }
  if (!civicrm_initialize()) {
    return;
  }
  $domain_id = civicrm_api('domain', 'getvalue', array(
      'version' => 3,
      'return' => 'id',
      'current_domain' => TRUE,
  ));
  $uf_info = civicrm_api('uf_match', 'getsingle', array(
      'version' => 3,
      'return' => 'uf_id',
      'contact_id' => $data->contact_id,
      'domain_id' => $domain_id,
  ));
  if (!empty($uf_info['uf_id'])) {
    $entity = entity_load('user', array($uf_info['uf_id']));
    return $entity[$uf_info['uf_id']];
  }
  else {
    return NULL;
  }
}

/**
 * Set user entity according to contact id.
 *
 * @param $data
 * @param $name
 * @param $value
 * @param $langcode
 * @param $type
 * @param $info
 * @return null|void
 */
function civicrm_entity_contact_user_set(&$data, $name, $value, $langcode, $type, $info) {
  if(!is_null($data->id)){
    if($user = user_load($value)){
      if (!module_exists('civicrm') || !function_exists('civicrm_initialize')) {
        return;
      }
      if (!civicrm_initialize()) {
        return;
      }
      $domain_id = civicrm_api('domain', 'getvalue', array(
          'version' => 3,
          'return' => 'id',
          'current_domain' => TRUE,
      ));
      $uf_info = civicrm_api('uf_match', 'create', array(
          'version' => 3,
          'contact_id' => $data->id,
          'uf_id' => $user->uid,
          'uf_name' => $user->name,
          'domain_id' => $domain_id,
      ));
      if (!$uf_info['is_error']) {
        $data->civi_user = $user;
      }
      else {
        return NULL;
      }
    }
  }
}

/**
 * Implements hook_rules_action_info_alter().
 *
 * I can't seem to get my info_alter function called by hook so am doing this hacky intercept
 * to call my function (& then go back to the main function if not a CiviCRM entity
 *
 * @param $info
 */
function civicrm_entity_rules_action_info_alter(&$info) {
  $info['entity_create']['callbacks']['info_alter'] = 'civicrm_entity_rules_action_entity_create_info_alter';
}

/**
 * Info alteration callback for the entity create action.
 *
 * Here we add a tonne of fields to civicrm entity create
 *
 * @param $element_info
 * @param RulesAbstractPlugin $element
 */
function civicrm_entity_rules_action_entity_create_info_alter(&$element_info, RulesAbstractPlugin $element) {
  if (empty($element->settings['type']) ||
    substr($element->settings['type'], 0, 8) != 'civicrm_'
  ) {
    module_load_include('inc', 'rules', 'modules/entity.eval');
    return rules_action_entity_create_info_alter($element_info, $element);
  }
  module_load_include('inc', 'rules', 'modules/data.rules');
  $civicrm_entity = str_replace('civicrm_', '', $element->settings['type']);
  if (!empty($element->settings['type']) &&
    entity_get_info($element->settings['type'])
  ) {
    $wrapper = entity_metadata_wrapper($element->settings['type']);
    // Add the data type's needed parameter for loading to the parameter info.
    $priority_fields = array('type');
    foreach ($wrapper as $name => $child) {
      $info = $child->info();
      if (substr($info['type'], 0, 8) == 'civicrm_') {
        //we are already showing id lets not show entity too
        continue;
      }
      $info = array_merge(array('type' => 'text'), $info);
      // Prefix parameter names to avoid name clashes with existing parameters.
      $element_info['parameter']['param_' .
      $name] = array_intersect_key($info, array_flip(array(
            'type',
            'label',
            'description'
          )));
      $element_info['parameter']['param_' .
      $name]['options list'] = $child->optionsList() ? 'rules_action_entity_parameter_options_list' : FALSE;
      $element_info['parameter']['param_' .
      $name]['optional'] = $element_info['parameter']['param_' .
      $name]['allow null'] = empty($info['required']);
      $element_info['parameter']['param_' . $name]['default mode'] = 'selector';
      if (!empty($info['required'])) {
        $priority_fields[] = 'param_' . $name;
      }
    }
    unset($element_info['parameter']['param_type']);
    if (in_array($civicrm_entity, array('participant', 'membership'))) {
      $element_info['parameter']['param_civicrm_contribution'] = array(
        'type' => 'civicrm_contribution',
        'label' => 'CiviCRM Contribution',
        'description' => t('Optional CiviCRM contribution for paid ' .
          $civicrm_entity),
        'optional' => TRUE,
        'allow null' => TRUE,
        'default mode' => 'selector',
      );
      $priority_fields[] = 'param_civicrm_contribution';
    }

    $element_info['parameter'] = array_merge(array_flip($priority_fields), $element_info['parameter']);
    foreach (civicrm_entity_get_custom_fields($civicrm_entity) as $fieldname => $field) {
      $element_info['parameter'][$fieldname] = array(
        'type' => $field['type'],
        'label' => $field['label'],
        'optional' => TRUE,
        'default mode' => 'selector',
        'allow null' => TRUE,
      );
    }

    $element_info['provides']['entity_created']['type'] = $element->settings['type'];
    if (($bundleKey = $wrapper->entityKey('bundle')) &&
      isset($element->settings['param_' . $bundleKey])
    ) {
      $element_info['provides']['entity_created']['bundle'] = $element->settings[
      'param_' . $bundleKey];
    }
  }
}

/**
 * Gets the custom fields for a CiviCRM entity
 *
 * @param $entity
 */
function civicrm_entity_get_custom_fields($entity, $types = array(
    'Integer' => 'integer',
    'String' => 'text',
    'Date' => 'date'
  )) {
  if (!civicrm_initialize()) {
    return array();
  }
  $fields = civicrm_api3($entity, 'getfields', array(
      'action' => 'create',
      'getoptions' => TRUE
    ));
  $fields = $fields['values'];
  foreach ($fields as $field_name => $field) {
    if (substr($field_name, 0, 7) != 'custom_' ||
      !in_array($field['data_type'], array_keys($types))
    ) {
      unset($fields[$field_name]);
    }
    else {
      $fields[$field_name]['type'] = $types[$field['data_type']];
    }
  }
  return $fields;
}


/**
 * Loads UI controller and generates view pages for civicrm entities
 *
 * @param integer $id
 * @param string  $entity_type
 * @param string  $view_mode
 *
 * @return string content
 */

function civicrm_entity_page_view($id, $entity_type) {
  $content = "";
  $entity = entity_load($entity_type, array($id));

  if (!empty($entity)) {
    $entity = $entity[$id];
    $controller = entity_get_controller($entity_type);
    if($entity_type == 'civicrm_contact') {
      //for some reason the is_deleted column of the contact record is coming to the entity
      // as contact_is_deleted ...special handling to have the page value set properly
      $entity->is_deleted = $entity->contact_is_deleted;
     }

    $content = $controller->view(array($id => $entity));
  }
  else {
    $content = '<p>No ' . $entity_type . ' record found for id: ' . $id . '</p>';
  }
  $formatted_entity_title = ucwords(str_replace('_', ' ', $entity_type));
  drupal_set_title($formatted_entity_title . ' ' . $id);

  return $content;
}

/**
 * Implements hook_ds_field_settings_form().
 */
function civicrm_entity_ds_field_settings_form($field) {
  return ds_ds_field_settings_form($field);
}

/**
 * Implements hook_ds_field_format_summary().
 */
function civicrm_entity_ds_field_format_summary($field) {
  return ds_ds_field_format_summary($field);
}

/**
 * Implementes hook_form_alter()
 */
function civicrm_entity_form_alter(&$form, &$form_state, $form_id){
// For the manage display form, add a submit handler to make display suite custom civicrm "field" settings stick
  if($form_id == 'field_ui_display_overview_form' ) {
    if (!civicrm_initialize(TRUE)) {
       return;
    }
    $entities = _civicrm_entity_enabled_entities();
    $entity_type = $form['#entity_type'];
    if(array_key_exists($entity_type,$entities)) {
      $submits = array();
      $submits[] = '_civicrm_entity_manage_display_submit';
      foreach($form['#submit'] as $submit_callback){
        $submits[] = $submit_callback;
      }
      $form['#submit'] = $submits;
    }

  }
}

/**
 * Custom submit handler
 *
 * Updates bundle visibility settings if a display suite layout is used
 *
 * @see civicrm_entity_form_alter().
 */
function _civicrm_entity_manage_display_submit(&$form, &$form_state) {
  if($form_state['values']['additional_settings']['layout']!=''){
    $entity_type = $form['#entity_type'];
    $bundle = $form['#bundle'];
    $bundle_settings = field_bundle_settings($entity_type, $bundle);

    foreach($bundle_settings['extra_fields']['display'] as $key => $field) {
      $form_state['values']['fields'][$key]['type'] = 'visible';
    }
  }
}

/**
 *  Implements hook_ds_fields_info().
 *
 *  Setup custom display suite "field" handling for CiviCRM properties
 *
 * @param $entity_type
 * @return array|void
 */
function civicrm_entity_ds_fields_info($entity_type) {
  $fields = array();
   if (!civicrm_initialize(TRUE)) {
    return;
  }
  $properties = _civicrm_entity_getproperties(substr($entity_type,8), 'property_info');
  $civicrm_entity_info = civicrm_entity_get_supported_entity_info($entity_type);

  // Basic wrapper and class settings for all CiviCRM properties, also makes the label visibility work
  foreach($properties as $name => $settings) {
    $fields[$entity_type][$name] = array(
      'title' => $settings['label'],
      'field_type' => 2,
      'function' => '_civicrm_entity_render_fields',
      'file' => drupal_get_path('module', 'civicrm_entity') . '/civicrm_entity.ds.inc',
      'properties' => array(
        'settings' => array(
          'wrapper' => array('type' => 'textfield', 'description' => t('Eg: h1, h2, p')),
          'class' => array('type' => 'textfield', 'description' => t('Put a class on the wrapper. Eg: block-title')),
        ),
       'default' => array('wrapper' => 'div', 'class' => 'civicrm-field'),
      ),
    );
    // could do some date formatter logic all at one here
    /*if(isset($settings['mysql_type') && $settings['mysql_type'] == 'datetime') {
       $fields[$entity_type][$name]['date']['date'] = TRUE;
       $fields[$entity_type][$name]['date']['granularity'] = $settings['granularity'];
    }*/
  }

  if(isset($civicrm_entity_info['display suite'])){
    if(isset($civicrm_entity_info['display suite']['link fields']) && count($civicrm_entity_info['display suite']['link fields'])){
      _civicrm_entity_link_addformatters($entity_type, $civicrm_entity_info['display suite']['link fields'], $fields);
    }
    if(isset($civicrm_entity_info['display suite']['option fields']) && count($civicrm_entity_info['display suite']['option fields'])){
      _civicrm_entity_option_addformatters($entity_type, $civicrm_entity_info['display suite']['option fields'], $fields);
    }
    if(isset($civicrm_entity_info['display suite']['boolean fields']) && count($civicrm_entity_info['display suite']['boolean fields'])){
      _civicrm_entity_yesno_addformatters($entity_type, $civicrm_entity_info['display suite']['boolean fields'], $fields);
    }
  }

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }
}
